package Analyzers;

import java.util.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.tipoDato;
import Expresiones.Aritmeticas;
import Expresiones.Relacionales;
import Expresiones.Logicos;
import Expresiones.Operadores;
import Expresiones.OperadoresRelacionales;
import Expresiones.OperadoresLogicos;
import Excepciones.Errores;

//Instrucciones
import Instrucciones.Print;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVar;
import Instrucciones.Incremento;
import Instrucciones.Decremento;
import Instrucciones.If;
import Instrucciones.Else;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.Continue;
import Instrucciones.While;
import Instrucciones.DoWhile;
import Instrucciones.Metodo;
import Instrucciones.DeclaracionLista;
import Instrucciones.Append;
import Instrucciones.AsignacionListas;
import Instrucciones.AccesoListas;
import Instrucciones.DeclaracionVectores;
import Instrucciones.DeclaracionVectores2;

//Expresiones
import Expresiones.Nativo;
import Expresiones.AccesoVar;
import Expresiones.Casteo;
import Expresiones.Round;

parser code 
{:

    Lexer l;
    Parser(Lexer l){this.l = l;}

    public LinkedList<Errores> ListaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){ 
        ListaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s){ 
        ListaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }  
:}

action code
{:  :}

/*      Terminales      */

terminal String T_PRINTLN;
terminal String T_ENTERO,T_CADENA,T_DECIMAL,T_CARACTER;
terminal String P_LEFT, P_RIGHT, T_SEMICOLON, T_BOLEANO, T_COLON;
terminal String T_PLUS, T_MINUS, T_TIMES, T_DIVIDE, T_POW, T_MOD;
terminal String T_TWOEQUAL, T_NOTEQUAL, T_LESSTHAN, T_LESSTHANEQUAL, T_GREATERTHAN, T_GREATERTHANEQUAL, T_EQUAL;
terminal String T_OR, T_AND, T_XOR, T_NOT;
terminal String T_INT, T_DOUBLE, T_STRING, T_BOOL, T_ID, T_VAR, T_CONST, T_CHARACTER;
terminal String T_INCREMENT, T_DECREMENT;
terminal String T_IF, T_ELSE, T_BRACKETIZ, T_BRACKETDER;
terminal String T_FOR;
terminal String T_BREAK, T_CONTINUE, T_WHILE, T_DO, T_BRACEIZ, T_BRACEDER;
terminal String T_ROUND, T_COMMA, T_VOID, T_LIST, T_NEW, T_DOT, T_APPEND;
terminal String UMENOS;

/*      No Terminales       */

non terminal LinkedList<Instruccion> INICIO, LISTAINSTRUCCIONES;
non terminal List<Instruccion> LISTA_VALORES;
non terminal List<List<Instruccion>> LISTA_VALORES_2D;
non terminal Instruccion INSTRUCCION, EXPRESION, IMPRIMIR, TIPOS, ARITMETICAS, RELACIONALES, LOGICOS, DECLARACION, ASIGNACION, CASTEO, INCREMENTO, DECREMENTO, IF, ELSE, FOR, BREAK, DECLARACIONFOR, CONTINUE, WHILE, DOWHILE, ROUND, METODO;
non terminal Instruccion DECLARACION_LISTA, APPEND, ASIGNACION_LISTA, ACCESO_LISTA, DECLARACION_VECTORES;
non terminal MUTABILIDAD;
non terminal Tipo TIPOSDECLARACION;

/*      Manejo de Precedencia   */

precedence left T_OR;
precedence left T_AND;
precedence left T_XOR;
precedence right T_NOT;
precedence left T_TWOEQUAL, T_NOTEQUAL;
precedence left T_LESSTHAN, T_LESSTHANEQUAL, T_GREATERTHAN, T_GREATERTHANEQUAL;
precedence left T_PLUS, T_MINUS;
precedence left T_TIMES, T_DIVIDE, T_MOD;
precedence right T_POW;
precedence right UMENOS;

start with INICIO; 

INICIO ::= LISTAINSTRUCCIONES:a         {: RESULT= a; :} 
    |       
;

LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES:a INSTRUCCION:b       {: RESULT = a;  RESULT.add(b); :}
    |                  INSTRUCCION:a                            {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRIMIR:a                                            {: RESULT = a; :}
    |           DECLARACION:a                                         {: RESULT = a; :}
    |           DECLARACION_LISTA:a                                   {: RESULT = a; :}
    |           DECLARACION_VECTORES:a                                {: RESULT = a; :}
    |           APPEND:a                                              {: RESULT = a; :}
    |           ASIGNACION_LISTA:a                                    {: RESULT = a; :}
    |           ASIGNACION:a                                          {: RESULT = a; :}
    |           IF:a                                                  {: RESULT = a; :}
    |           FOR:a                                                 {: RESULT = a; :}
    |           WHILE:a                                               {: RESULT = a; :}
    |           DOWHILE:a                                             {: RESULT = a; :}
    |           BREAK:a                                               {: RESULT = a; :}
    |           CONTINUE:a                                            {: RESULT = a; :}
    |           INCREMENTO:a                                          {: RESULT = a; :}
    |           DECREMENTO:a                                          {: RESULT = a; :}
    |           METODO:a                                              {: RESULT = a; :}
    |           error
    |           error T_SEMICOLON 
;

IMPRIMIR ::= T_PRINTLN P_LEFT EXPRESION:a P_RIGHT T_SEMICOLON       {: RESULT = new Print(a,aleft,aright); :}
;

DECLARACION ::= MUTABILIDAD:m T_ID:b T_COLON TIPOSDECLARACION:a T_EQUAL EXPRESION:c T_SEMICOLON     {: Boolean mut = (Boolean) m; RESULT = new Declaracion(b, c, a, mut.booleanValue(), aleft, aright);    :}
        |       MUTABILIDAD:m T_ID:b T_COLON TIPOSDECLARACION:a T_SEMICOLON                         {: Boolean mut = (Boolean) m; RESULT = new Declaracion(b, null, a, mut.booleanValue(), aleft, aright); :}
;

DECLARACION_LISTA::= T_LIST T_LESSTHAN TIPOSDECLARACION:a T_GREATERTHAN T_ID:b T_EQUAL T_NEW T_LIST P_LEFT P_RIGHT T_SEMICOLON {: RESULT = new DeclaracionLista(b,a,aleft,aright); :}
;

DECLARACION_VECTORES::= MUTABILIDAD:m T_ID:a T_COLON TIPOSDECLARACION:b T_BRACEIZ T_BRACEDER T_EQUAL T_BRACEIZ LISTA_VALORES:c T_BRACEDER T_SEMICOLON                   {: Boolean mut = (Boolean) m; RESULT = new DeclaracionVectores(a,b,c, mut.booleanValue(), aleft, aright); :}
            | MUTABILIDAD:m T_ID:a T_COLON TIPOSDECLARACION:b T_BRACEIZ T_BRACEDER T_BRACEIZ T_BRACEDER T_EQUAL T_BRACEIZ LISTA_VALORES_2D:c T_BRACEDER T_SEMICOLON     {: Boolean mut = (Boolean) m; RESULT = new DeclaracionVectores2(a, b, c, mut.booleanValue(), aleft, aright); :}
;

LISTA_VALORES::= LISTA_VALORES:a T_COMMA  EXPRESION:b   {: List<Instruccion> lista = (List<Instruccion>) a; lista.add((Instruccion) b); RESULT = lista; :}
            |    EXPRESION:a                            {: List<Instruccion> lista = new LinkedList<>(); lista.add((Instruccion) a); RESULT = lista;  :}
;

LISTA_VALORES_2D::= LISTA_VALORES_2D:a T_COMMA T_BRACEIZ LISTA_VALORES:b T_BRACEDER {: List<List<Instruccion>> lista = (List<List<Instruccion>>) a; lista.add((List<Instruccion>) b); RESULT = lista; :}
            |    T_BRACEIZ LISTA_VALORES:a T_BRACEDER {: List<List<Instruccion>> lista = new LinkedList<>(); lista.add((List<Instruccion>) a); RESULT = lista; :}
;

APPEND::= T_ID:a T_DOT T_APPEND P_LEFT EXPRESION:b P_RIGHT T_SEMICOLON   {: RESULT = new Append(a,b,aleft,aright); :}
;

ASIGNACION ::= T_ID:a T_EQUAL EXPRESION:b T_SEMICOLON {: RESULT = new AsignacionVar(a, b, aleft, aright); :}
;

ASIGNACION_LISTA::= T_ID:a T_BRACEIZ EXPRESION:b T_BRACEDER T_EQUAL EXPRESION:c T_SEMICOLON {: RESULT = new AsignacionListas(a, b, c, aleft, aright); :}
;

ACCESO_LISTA::= T_ID:a T_BRACEIZ EXPRESION:b T_BRACEDER {: RESULT = new AccesoListas(a,b, aleft,aright); :}
;

MUTABILIDAD ::= T_VAR   {: RESULT = new Boolean(true); :}
              | T_CONST {: RESULT = new Boolean(false); :}
;

TIPOSDECLARACION::= T_INT           {: RESULT = new Tipo(tipoDato.ENTERO);   :}
            |       T_DOUBLE        {: RESULT = new Tipo(tipoDato.DECIMAL);  :}
            |       T_STRING        {: RESULT = new Tipo(tipoDato.CADENA);   :}
            |       T_BOOL          {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
            |       T_CHARACTER     {: RESULT = new Tipo(tipoDato.CARACTER); :}
            |       T_VOID          {: RESULT = new Tipo(tipoDato.VOID); :}
;

INCREMENTO ::= T_ID:a T_INCREMENT T_SEMICOLON              {: RESULT = new Incremento(a, aleft, aright); :}
            |  T_ID:a T_INCREMENT                          {: RESULT = new Incremento(a, aleft, aright); :}
;

DECREMENTO ::= T_ID:a T_DECREMENT T_SEMICOLON              {: RESULT = new Decremento(a, aleft, aright); :}
            |  T_ID:a T_DECREMENT                          {: RESULT = new Decremento(a, aleft, aright); :}
;

IF::= T_IF P_LEFT EXPRESION:a P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES:b T_BRACKETDER ELSE:c  {: RESULT = new If(a,b,c, aleft, aright); :}
;

ELSE::= T_ELSE IF:a                                           {: RESULT = a; :} 
    | T_ELSE T_BRACKETIZ LISTAINSTRUCCIONES:a T_BRACKETDER    {: RESULT = new Else(a,aleft,aright); :}
    |                                                         {: RESULT = null; :}    
;

FOR::= T_FOR P_LEFT ASIGNACION:a EXPRESION:b T_SEMICOLON DECLARACIONFOR:c P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES:d T_BRACKETDER  {: RESULT = new For(a,b,c,d, aleft, aright); :}
;

DECLARACIONFOR::= T_ID:a T_EQUAL EXPRESION:b                      {: RESULT = new AsignacionVar(a,b,aleft,aright); :}
     |            INCREMENTO:a                                    {: RESULT = a; :}  
     |            DECREMENTO:a                                    {: RESULT = a; :} 
;

WHILE::= T_WHILE P_LEFT EXPRESION:a P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES:b T_BRACKETDER   {: RESULT = new While(a,b,aleft,aright); :}
; 

DOWHILE::= T_DO T_BRACKETIZ LISTAINSTRUCCIONES:a T_BRACKETDER T_WHILE P_LEFT EXPRESION:b P_RIGHT T_SEMICOLON {: RESULT = new DoWhile(a,b,aleft,aright); :}
;

BREAK::= T_BREAK:a T_SEMICOLON                                {: RESULT = new Break(aleft,aright); :}
;

CONTINUE::= T_CONTINUE:a T_SEMICOLON                          {: RESULT = new Continue(aleft,aright); :}
;

EXPRESION ::= T_MINUS EXPRESION:a                   {: RESULT = new Aritmeticas(a, Operadores.NEGACION, aleft, aright); :} %prec UMENOS
       |      T_ID:a                                {: RESULT = new AccesoVar(a, aleft, aright); :}
       |      P_LEFT EXPRESION:a P_RIGHT            {: RESULT = a; :}
       |      TIPOS:a                               {: RESULT = a; :}
       |      ARITMETICAS:a                         {: RESULT = a; :}
       |      RELACIONALES:a                        {: RESULT = a; :}
       |      LOGICOS:a                             {: RESULT = a; :}
       |      CASTEO:a                              {: RESULT = a; :}
       |      ROUND:a                               {: RESULT = a; :}
       |      ACCESO_LISTA:a                        {: RESULT = a; :}
;

ARITMETICAS ::=  EXPRESION:a T_PLUS EXPRESION:b      {: RESULT = new Aritmeticas(a,b, Operadores.SUMA, aleft, aright); :}    
       |         EXPRESION:a T_MINUS EXPRESION:b     {: RESULT = new Aritmeticas(a,b, Operadores.RESTA, aleft, aright); :}
       |         EXPRESION:a T_TIMES EXPRESION:b     {: RESULT = new Aritmeticas(a,b, Operadores.MULTIPLICACION, aleft, aright); :}
       |         EXPRESION:a T_DIVIDE EXPRESION:b    {: RESULT = new Aritmeticas(a,b, Operadores.DIVISION, aleft, aright); :}
       |         EXPRESION:a T_POW EXPRESION:b       {: RESULT = new Aritmeticas(a,b, Operadores.POTENCIA, aleft, aright); :}
       |         EXPRESION:a T_MOD EXPRESION:b       {: RESULT = new Aritmeticas(a,b, Operadores.MODULO, aleft, aright); :}
;

RELACIONALES ::= EXPRESION:a T_TWOEQUAL EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.IGUALIGUAL, aleft, aright); :} %prec T_TWOEQUAL
       |         EXPRESION:a T_NOTEQUAL EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.DIFERENTEIGUAL, aleft, aright); :} 
       |         EXPRESION:a T_LESSTHAN EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MENOR, aleft, aright); :} 
       |         EXPRESION:a T_LESSTHANEQUAL EXPRESION:b       {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MENORQUE, aleft, aright); :} 
       |         EXPRESION:a T_GREATERTHAN EXPRESION:b         {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYOR, aleft, aright); :}       
       |         EXPRESION:a T_GREATERTHANEQUAL EXPRESION:b    {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}       
;

LOGICOS ::=      EXPRESION:a T_OR EXPRESION:b    {: RESULT = new Logicos(a,b, OperadoresLogicos.OR, aleft, aright); :}
       |         EXPRESION:a T_AND EXPRESION:b   {: RESULT = new Logicos(a,b, OperadoresLogicos.AND, aleft, aright); :}
       |         EXPRESION:a T_XOR EXPRESION:b   {: RESULT = new Logicos(a,b, OperadoresLogicos.XOR, aleft, aright); :}
       |         T_NOT EXPRESION:a               {: RESULT = new Logicos(a,   OperadoresLogicos.NOT, aleft, aright); :}
;

TIPOS ::=  T_ENTERO:a     {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
    |  T_CADENA:a     {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
    |  T_DECIMAL:a    {: RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
    |  T_CARACTER:a   {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); :}
    |  T_BOLEANO:a    {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
;

CASTEO ::= P_LEFT TIPOSDECLARACION:a P_RIGHT EXPRESION:b  {: RESULT = new Casteo(b, a, aleft, aright); :}
;

/*      SEGUNDA FASE    */

ROUND ::=  T_ROUND P_LEFT EXPRESION:a P_RIGHT              {: RESULT = new Round(a, aleft, aright); :}
;

METODO ::= TIPOSDECLARACION:a T_ID:b P_LEFT  P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES:c T_BRACKETDER   {: RESULT = new Metodo(b,c,a, aleft, aright); :}
;