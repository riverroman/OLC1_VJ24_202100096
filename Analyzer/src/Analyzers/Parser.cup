package Analyzers;

import java_cup.runtime.*;
import java.util.LinkedList;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.tipoDato;
import Expresiones.Aritmeticas;
import Expresiones.Relacionales;
import Expresiones.Logicos;
import Expresiones.Operadores;
import Expresiones.OperadoresRelacionales;
import Expresiones.OperadoresLogicos;

//Instrucciones
import Instrucciones.Print;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVar;

//Expresiones
import Expresiones.Nativo;
import Expresiones.AccesoVar;
import Expresiones.Casteo;

parser code 
{:

    Lexer l;
    Parser(Lexer l){this.l = l;}

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintactico en la Linea | " + (s.left) + " Columna | " + s.right+ " No se esperaba este componente | " + s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea | " + (s.left)+ " Columna | "+ s.right+" Componente | " + s.value + " | No reconocido"); 
    }  
:}

action code
{:  :}

/*      Terminales      */

terminal String T_PRINTLN;
terminal String T_ENTERO,T_CADENA,T_DECIMAL,T_CARACTER;
terminal String P_LEFT, P_RIGHT, T_SEMICOLON, T_BOLEANO, T_COLON;
terminal String T_PLUS, T_MINUS, T_TIMES, T_DIVIDE, T_POW, T_MOD;
terminal String T_TWOEQUAL, T_NOTEQUAL, T_LESSTHAN, T_LESSTHANEQUAL, T_GREATERTHAN, T_GREATERTHANEQUAL, T_EQUAL;
terminal String T_OR, T_AND, T_XOR, T_NOT;
terminal String T_INT, T_DOUBLE, T_STRING, T_BOOL, T_ID, T_VAR, T_CONST, T_CHARACTER;
terminal String UMENOS;

/*      No Terminales       */

non terminal LinkedList<Instruccion> INICIO, LISTAINSTRUCCIONES;
non terminal Instruccion INSTRUCCION;
non terminal Instruccion EXPRESION;
non terminal Instruccion IMPRIMIR, TIPOS, ARITMETICAS, RELACIONALES, LOGICOS;
non terminal Instruccion DECLARACION, ASIGNACION, CASTEO;
non terminal Tipo TIPOSDECLARACION;
non terminal MUTABILIDAD;

/*      Manejo de Precedencia   */

precedence left T_OR;
precedence left T_AND;
precedence left T_XOR;
precedence right T_NOT;
precedence left T_TWOEQUAL, T_NOTEQUAL;
precedence left T_LESSTHAN, T_LESSTHANEQUAL, T_GREATERTHAN, T_GREATERTHANEQUAL;
precedence left T_PLUS, T_MINUS;
precedence left T_TIMES, T_DIVIDE, T_MOD;
precedence right T_POW;
precedence right UMENOS;

start with INICIO; 

INICIO ::= LISTAINSTRUCCIONES:a         {: RESULT= a; :} 
    |       
;

LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES:a INSTRUCCION:b       {: RESULT = a;  RESULT.add(b); :}
    |                  INSTRUCCION:a                            {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRIMIR:a                                            {: RESULT = a; :}
    |           DECLARACION:a                                         {: RESULT = a; :}
    |           ASIGNACION:a                                          {: RESULT = a; :}
;

IMPRIMIR ::= T_PRINTLN P_LEFT EXPRESION:a P_RIGHT T_SEMICOLON       {: RESULT = new Print(a,aleft,aright); :}
;

DECLARACION ::= MUTABILIDAD:m T_ID:b T_COLON TIPOSDECLARACION:a T_EQUAL EXPRESION:c T_SEMICOLON     {: Boolean mut = (Boolean) m; RESULT = new Declaracion(b, c, a, mut.booleanValue(), aleft, aright);    :}
        |       MUTABILIDAD:m T_ID:b T_COLON TIPOSDECLARACION:a T_SEMICOLON                         {: Boolean mut = (Boolean) m; RESULT = new Declaracion(b, null, a, mut.booleanValue(), aleft, aright); :}
;

ASIGNACION ::= T_ID:a T_EQUAL EXPRESION:b T_SEMICOLON {: RESULT = new AsignacionVar(a,b, aleft, aright); :}
;

MUTABILIDAD ::= T_VAR   {: RESULT = new Boolean(true); :}
              | T_CONST {: RESULT = new Boolean(false); :}
;

TIPOSDECLARACION::= T_INT           {: RESULT = new Tipo(tipoDato.ENTERO);   :}
            |       T_DOUBLE        {: RESULT = new Tipo(tipoDato.DECIMAL);  :}
            |       T_STRING        {: RESULT = new Tipo(tipoDato.CADENA);   :}
            |       T_BOOL          {: RESULT = new Tipo(tipoDato.BOOLEANO); :}
            |       T_CHARACTER     {: RESULT = new Tipo(tipoDato.CARACTER); :}
;

EXPRESION ::= T_MINUS EXPRESION:a                   {: RESULT = new Aritmeticas(a, Operadores.NEGACION, aleft, aright); :} %prec UMENOS
       |      P_LEFT EXPRESION:a P_RIGHT            {: RESULT = a; :}
       |      TIPOS:a                               {: RESULT = a; :}
       |      ARITMETICAS:a                         {: RESULT = a; :}
       |      RELACIONALES:a                        {: RESULT = a; :}
       |      LOGICOS:a                             {: RESULT = a; :}
       |      T_ID:a                                {: RESULT = new AccesoVar(a, aleft, aright); :}
       |      CASTEO:a                              {: RESULT = a; :}
;

ARITMETICAS ::=  EXPRESION:a T_PLUS EXPRESION:b      {: RESULT = new Aritmeticas(a,b, Operadores.SUMA, aleft, aright); :}    
       |         EXPRESION:a T_MINUS EXPRESION:b     {: RESULT = new Aritmeticas(a,b, Operadores.RESTA, aleft, aright); :}
       |         EXPRESION:a T_TIMES EXPRESION:b     {: RESULT = new Aritmeticas(a,b, Operadores.MULTIPLICACION, aleft, aright); :}
       |         EXPRESION:a T_DIVIDE EXPRESION:b    {: RESULT = new Aritmeticas(a,b, Operadores.DIVISION, aleft, aright); :}
       |         EXPRESION:a T_POW EXPRESION:b       {: RESULT = new Aritmeticas(a,b, Operadores.POTENCIA, aleft, aright); :}
       |         EXPRESION:a T_MOD EXPRESION:b       {: RESULT = new Aritmeticas(a,b, Operadores.MODULO, aleft, aright); :}
;

RELACIONALES ::= EXPRESION:a T_TWOEQUAL EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.IGUALIGUAL, aleft, aright); :} %prec T_TWOEQUAL
       |         EXPRESION:a T_NOTEQUAL EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.DIFERENTEIGUAL, aleft, aright); :} 
       |         EXPRESION:a T_LESSTHAN EXPRESION:b            {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MENOR, aleft, aright); :} 
       |         EXPRESION:a T_LESSTHANEQUAL EXPRESION:b       {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MENORQUE, aleft, aright); :} 
       |         EXPRESION:a T_GREATERTHAN EXPRESION:b         {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYOR, aleft, aright); :}       
       |         EXPRESION:a T_GREATERTHANEQUAL EXPRESION:b    {: RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYORQUE, aleft, aright); :}       
;

LOGICOS ::=      EXPRESION:a T_OR EXPRESION:b    {: RESULT = new Logicos(a,b, OperadoresLogicos.OR, aleft, aright); :}
       |         EXPRESION:a T_AND EXPRESION:b   {: RESULT = new Logicos(a,b, OperadoresLogicos.AND, aleft, aright); :}
       |         EXPRESION:a T_XOR EXPRESION:b   {: RESULT = new Logicos(a,b, OperadoresLogicos.XOR, aleft, aright); :}
       |         T_NOT EXPRESION:a               {: RESULT = new Logicos(a,   OperadoresLogicos.NOT, aleft, aright); :}
;

TIPOS ::=
    |  T_ENTERO:a     {: RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); :}
    |  T_CADENA:a     {: RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); :}
    |  T_DECIMAL:a    {: RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright); :}
    |  T_CARACTER:a   {: RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); :}
    |  T_BOLEANO:a    {: RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); :}
;

CASTEO ::= P_LEFT TIPOSDECLARACION:a P_RIGHT EXPRESION:b  {: RESULT = new Casteo(b, a, aleft, aright); :}
;

