
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java_cup.runtime.*;
import java.util.LinkedList;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.tipoDato;
import Expresiones.Aritmeticas;
import Expresiones.Relacionales;
import Expresiones.Logicos;
import Expresiones.Operadores;
import Expresiones.OperadoresRelacionales;
import Expresiones.OperadoresLogicos;
import Instrucciones.Print;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVar;
import Instrucciones.Incremento;
import Instrucciones.Decremento;
import Instrucciones.If;
import Instrucciones.Else;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.Continue;
import Instrucciones.While;
import Instrucciones.DoWhile;
import Expresiones.Nativo;
import Expresiones.AccesoVar;
import Expresiones.Casteo;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\112\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\004\003" +
    "\000\002\004\003\000\002\004\003\000\002\004\003\000" +
    "\002\004\003\000\002\004\003\000\002\004\003\000\002" +
    "\004\003\000\002\004\003\000\002\004\003\000\002\004" +
    "\003\000\002\006\007\000\002\013\011\000\002\013\007" +
    "\000\002\014\006\000\002\031\003\000\002\031\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003\000\002" +
    "\020\003\000\002\020\003\000\002\016\005\000\002\016" +
    "\004\000\002\017\005\000\002\017\004\000\002\021\012" +
    "\000\002\022\004\000\002\022\006\000\002\022\002\000" +
    "\002\023\014\000\002\025\005\000\002\025\003\000\002" +
    "\025\003\000\002\027\011\000\002\030\013\000\002\024" +
    "\004\000\002\026\004\000\002\005\004\000\002\005\003" +
    "\000\002\005\005\000\002\005\003\000\002\005\003\000" +
    "\002\005\003\000\002\005\003\000\002\005\003\000\002" +
    "\010\005\000\002\010\005\000\002\010\005\000\002\010" +
    "\005\000\002\010\005\000\002\010\005\000\002\011\005" +
    "\000\002\011\005\000\002\011\005\000\002\011\005\000" +
    "\002\011\005\000\002\011\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\004\000\002\007" +
    "\002\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\015\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\030\002\uffff\004\033\043\017\044\032\045" +
    "\014\051\016\055\030\056\010\057\023\060\026\061\021" +
    "\001\002\000\032\002\ufffd\004\ufffd\043\ufffd\044\ufffd\045" +
    "\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060\ufffd" +
    "\061\ufffd\001\002\000\032\002\ufff4\004\ufff4\043\ufff4\044" +
    "\ufff4\045\ufff4\051\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4" +
    "\060\ufff4\061\ufff4\001\002\000\032\002\ufff7\004\ufff7\043" +
    "\ufff7\044\ufff7\045\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\001\002\000\032\002\ufffb\004" +
    "\ufffb\043\ufffb\044\ufffb\045\ufffb\051\ufffb\054\ufffb\055\ufffb" +
    "\056\ufffb\057\ufffb\060\ufffb\061\ufffb\001\002\000\004\013" +
    "\223\001\002\000\030\002\000\004\033\043\017\044\032" +
    "\045\014\051\016\055\030\056\010\057\023\060\026\061" +
    "\021\001\002\000\032\002\ufffc\004\ufffc\043\ufffc\044\ufffc" +
    "\045\ufffc\051\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060" +
    "\ufffc\061\ufffc\001\002\000\032\002\ufff6\004\ufff6\043\ufff6" +
    "\044\ufff6\045\ufff6\051\ufff6\054\ufff6\055\ufff6\056\ufff6\057" +
    "\ufff6\060\ufff6\061\ufff6\001\002\000\004\043\uffec\001\002" +
    "\000\032\002\ufff9\004\ufff9\043\ufff9\044\ufff9\045\ufff9\051" +
    "\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9\061\ufff9" +
    "\001\002\000\004\011\207\001\002\000\010\032\135\047" +
    "\153\050\155\001\002\000\032\002\ufffa\004\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\051\ufffa\054\ufffa\055\ufffa\056\ufffa\057" +
    "\ufffa\060\ufffa\061\ufffa\001\002\000\004\053\177\001\002" +
    "\000\032\002\ufff5\004\ufff5\043\ufff5\044\ufff5\045\ufff5\051" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\001\002\000\004\013\176\001\002\000\032\002\ufff3\004" +
    "\ufff3\043\ufff3\044\ufff3\045\ufff3\051\ufff3\054\ufff3\055\ufff3" +
    "\056\ufff3\057\ufff3\060\ufff3\061\ufff3\001\002\000\004\043" +
    "\167\001\002\000\004\011\161\001\002\000\032\002\ufff2" +
    "\004\ufff2\043\ufff2\044\ufff2\045\ufff2\051\ufff2\054\ufff2\055" +
    "\ufff2\056\ufff2\057\ufff2\060\ufff2\061\ufff2\001\002\000\004" +
    "\011\132\001\002\000\032\002\ufff8\004\ufff8\043\ufff8\044" +
    "\ufff8\045\ufff8\051\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8" +
    "\060\ufff8\061\ufff8\001\002\000\004\043\uffed\001\002\000" +
    "\004\011\036\001\002\000\004\002\035\001\002\000\004" +
    "\002\001\001\002\000\062\005\055\006\045\007\041\010" +
    "\043\011\044\012\uffbe\014\040\016\uffbe\017\050\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047" +
    "\043\042\001\002\000\044\012\uffd2\013\uffd2\016\uffd2\017" +
    "\uffd2\020\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025\uffd2" +
    "\026\uffd2\027\uffd2\030\uffd2\031\uffd2\033\uffd2\034\uffd2\035" +
    "\uffd2\001\002\000\044\012\uffb9\013\uffb9\016\uffb9\017\uffb9" +
    "\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9\026" +
    "\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035\uffb9" +
    "\001\002\000\044\012\uffbb\013\uffbb\016\uffbb\017\uffbb\020" +
    "\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb\026\uffbb" +
    "\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035\uffbb\001" +
    "\002\000\044\012\uffd5\013\uffd5\016\uffd5\017\uffd5\020\uffd5" +
    "\021\uffd5\022\uffd5\023\uffd5\024\uffd5\025\uffd5\026\uffd5\027" +
    "\uffd5\030\uffd5\031\uffd5\033\uffd5\034\uffd5\035\uffd5\001\002" +
    "\000\044\012\uffba\013\uffba\016\uffba\017\uffba\020\uffba\021" +
    "\uffba\022\uffba\023\uffba\024\uffba\025\uffba\026\uffba\027\uffba" +
    "\030\uffba\031\uffba\033\uffba\034\uffba\035\uffba\001\002\000" +
    "\074\005\055\006\045\007\041\010\043\011\044\012\uffbe" +
    "\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\047\037\120\040\123\041" +
    "\124\042\122\043\042\046\125\001\002\000\044\012\uffbc" +
    "\013\uffbc\016\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023" +
    "\uffbc\024\uffbc\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc" +
    "\033\uffbc\034\uffbc\035\uffbc\001\002\000\044\012\uffd0\013" +
    "\uffd0\016\uffd0\017\uffd0\020\uffd0\021\uffd0\022\uffd0\023\uffd0" +
    "\024\uffd0\025\uffd0\026\uffd0\027\uffd0\030\uffd0\031\uffd0\033" +
    "\uffd0\034\uffd0\035\uffd0\001\002\000\064\005\055\006\045" +
    "\007\041\010\043\011\044\012\uffbe\013\uffbe\014\040\016" +
    "\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\047\043\042\001\002\000\064\005\055" +
    "\006\045\007\041\010\043\011\044\012\uffbe\013\uffbe\014" +
    "\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002\000\044" +
    "\012\uffd1\013\uffd1\016\uffd1\017\uffd1\020\uffd1\021\uffd1\022" +
    "\uffd1\023\uffd1\024\uffd1\025\uffd1\026\uffd1\027\uffd1\030\uffd1" +
    "\031\uffd1\033\uffd1\034\uffd1\035\uffd1\001\002\000\042\012" +
    "\060\016\057\017\072\020\065\021\070\022\056\023\061" +
    "\024\063\025\066\026\062\027\064\030\071\031\073\033" +
    "\067\034\074\035\075\001\002\000\044\012\uffcf\013\uffcf" +
    "\016\uffcf\017\uffcf\020\uffcf\021\uffcf\022\uffcf\023\uffcf\024" +
    "\uffcf\025\uffcf\026\uffcf\027\uffcf\030\uffcf\031\uffcf\033\uffcf" +
    "\034\uffcf\035\uffcf\001\002\000\044\012\uffd3\013\uffd3\016" +
    "\uffd3\017\uffd3\020\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3" +
    "\025\uffd3\026\uffd3\027\uffd3\030\uffd3\031\uffd3\033\uffd3\034" +
    "\uffd3\035\uffd3\001\002\000\044\012\uffbd\013\uffbd\016\uffbd" +
    "\017\uffbd\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025" +
    "\uffbd\026\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd" +
    "\035\uffbd\001\002\000\064\005\055\006\045\007\041\010" +
    "\043\011\044\012\uffbe\013\uffbe\014\040\016\uffbe\017\050" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\047\043\042\001\002\000\064\005\055\006\045\007" +
    "\041\010\043\011\044\012\uffbe\013\uffbe\014\040\016\uffbe" +
    "\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\047\043\042\001\002\000\004\013\113\001" +
    "\002\000\064\005\055\006\045\007\041\010\043\011\044" +
    "\012\uffbe\013\uffbe\014\040\016\uffbe\017\050\020\uffbe\021" +
    "\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe" +
    "\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043" +
    "\042\001\002\000\064\005\055\006\045\007\041\010\043" +
    "\011\044\012\uffbe\013\uffbe\014\040\016\uffbe\017\050\020" +
    "\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe" +
    "\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036" +
    "\047\043\042\001\002\000\064\005\055\006\045\007\041" +
    "\010\043\011\044\012\uffbe\013\uffbe\014\040\016\uffbe\017" +
    "\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe" +
    "\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035" +
    "\uffbe\036\047\043\042\001\002\000\064\005\055\006\045" +
    "\007\041\010\043\011\044\012\uffbe\013\uffbe\014\040\016" +
    "\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\047\043\042\001\002\000\064\005\055" +
    "\006\045\007\041\010\043\011\044\012\uffbe\013\uffbe\014" +
    "\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002\000\064" +
    "\005\055\006\045\007\041\010\043\011\044\012\uffbe\013" +
    "\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe" +
    "\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031" +
    "\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002" +
    "\000\064\005\055\006\045\007\041\010\043\011\044\012" +
    "\uffbe\013\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe" +
    "\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030" +
    "\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042" +
    "\001\002\000\064\005\055\006\045\007\041\010\043\011" +
    "\044\012\uffbe\013\uffbe\014\040\016\uffbe\017\050\020\uffbe" +
    "\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027" +
    "\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047" +
    "\043\042\001\002\000\064\005\055\006\045\007\041\010" +
    "\043\011\044\012\uffbe\013\uffbe\014\040\016\uffbe\017\050" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\047\043\042\001\002\000\064\005\055\006\045\007" +
    "\041\010\043\011\044\012\uffbe\013\uffbe\014\040\016\uffbe" +
    "\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025" +
    "\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe" +
    "\035\uffbe\036\047\043\042\001\002\000\064\005\055\006" +
    "\045\007\041\010\043\011\044\012\uffbe\013\uffbe\014\040" +
    "\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024" +
    "\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe" +
    "\034\uffbe\035\uffbe\036\047\043\042\001\002\000\064\005" +
    "\055\006\045\007\041\010\043\011\044\012\uffbe\013\uffbe" +
    "\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002\000" +
    "\064\005\055\006\045\007\041\010\043\011\044\012\uffbe" +
    "\013\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001" +
    "\002\000\044\012\uffc0\013\uffc0\016\057\017\072\020\065" +
    "\021\070\022\056\023\061\024\063\025\066\026\062\027" +
    "\064\030\071\031\073\033\uffc0\034\uffc0\035\uffc0\001\002" +
    "\000\044\012\uffc1\013\uffc1\016\057\017\072\020\065\021" +
    "\070\022\056\023\061\024\063\025\066\026\062\027\064" +
    "\030\071\031\073\033\uffc1\034\uffc1\035\075\001\002\000" +
    "\044\012\uffc3\013\uffc3\016\057\017\072\020\065\021\070" +
    "\022\056\023\061\024\uffc3\025\uffc3\026\uffc3\027\uffc3\030" +
    "\uffc3\031\uffc3\033\uffc3\034\uffc3\035\uffc3\001\002\000\044" +
    "\012\uffcd\013\uffcd\016\uffcd\017\uffcd\020\065\021\070\022" +
    "\056\023\061\024\uffcd\025\uffcd\026\uffcd\027\uffcd\030\uffcd" +
    "\031\uffcd\033\uffcd\034\uffcd\035\uffcd\001\002\000\044\012" +
    "\uffc4\013\uffc4\016\057\017\072\020\065\021\070\022\056" +
    "\023\061\024\uffc4\025\uffc4\026\uffc4\027\uffc4\030\uffc4\031" +
    "\uffc4\033\uffc4\034\uffc4\035\uffc4\001\002\000\044\012\uffcb" +
    "\013\uffcb\016\uffcb\017\uffcb\020\uffcb\021\uffcb\022\056\023" +
    "\uffcb\024\uffcb\025\uffcb\026\uffcb\027\uffcb\030\uffcb\031\uffcb" +
    "\033\uffcb\034\uffcb\035\uffcb\001\002\000\044\012\uffc2\013" +
    "\uffc2\016\057\017\072\020\065\021\070\022\056\023\061" +
    "\024\063\025\066\026\062\027\064\030\071\031\073\033" +
    "\uffc2\034\074\035\075\001\002\000\044\012\uffc7\013\uffc7" +
    "\016\057\017\072\020\065\021\070\022\056\023\061\024" +
    "\uffc7\025\uffc7\026\062\027\064\030\071\031\073\033\uffc7" +
    "\034\uffc7\035\uffc7\001\002\000\044\012\uffcc\013\uffcc\016" +
    "\uffcc\017\uffcc\020\uffcc\021\uffcc\022\056\023\uffcc\024\uffcc" +
    "\025\uffcc\026\uffcc\027\uffcc\030\uffcc\031\uffcc\033\uffcc\034" +
    "\uffcc\035\uffcc\001\002\000\044\012\uffc5\013\uffc5\016\057" +
    "\017\072\020\065\021\070\022\056\023\061\024\uffc5\025" +
    "\uffc5\026\uffc5\027\uffc5\030\uffc5\031\uffc5\033\uffc5\034\uffc5" +
    "\035\uffc5\001\002\000\044\012\uffc8\013\uffc8\016\057\017" +
    "\072\020\065\021\070\022\056\023\061\024\uffc8\025\uffc8" +
    "\026\062\027\064\030\071\031\073\033\uffc8\034\uffc8\035" +
    "\uffc8\001\002\000\044\012\uffc6\013\uffc6\016\057\017\072" +
    "\020\065\021\070\022\056\023\061\024\uffc6\025\uffc6\026" +
    "\uffc6\027\uffc6\030\uffc6\031\uffc6\033\uffc6\034\uffc6\035\uffc6" +
    "\001\002\000\044\012\uffc9\013\uffc9\016\uffc9\017\uffc9\020" +
    "\uffc9\021\uffc9\022\056\023\uffc9\024\uffc9\025\uffc9\026\uffc9" +
    "\027\uffc9\030\uffc9\031\uffc9\033\uffc9\034\uffc9\035\uffc9\001" +
    "\002\000\032\002\ufff1\004\ufff1\043\ufff1\044\ufff1\045\ufff1" +
    "\051\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1\061" +
    "\ufff1\001\002\000\044\012\uffce\013\uffce\016\uffce\017\uffce" +
    "\020\065\021\070\022\056\023\061\024\uffce\025\uffce\026" +
    "\uffce\027\uffce\030\uffce\031\uffce\033\uffce\034\uffce\035\uffce" +
    "\001\002\000\044\012\uffca\013\uffca\016\uffca\017\uffca\020" +
    "\uffca\021\uffca\022\056\023\uffca\024\uffca\025\uffca\026\uffca" +
    "\027\uffca\030\uffca\031\uffca\033\uffca\034\uffca\035\uffca\001" +
    "\002\000\044\012\uffd6\013\uffd6\016\uffd6\017\uffd6\020\uffd6" +
    "\021\uffd6\022\uffd6\023\uffd6\024\uffd6\025\uffd6\026\uffd6\027" +
    "\uffd6\030\uffd6\031\uffd6\033\uffd6\034\uffd6\035\uffd6\001\002" +
    "\000\044\012\uffbf\013\uffbf\016\057\017\072\020\065\021" +
    "\070\022\056\023\061\024\063\025\066\026\062\027\064" +
    "\030\071\031\073\033\uffbf\034\uffbf\035\uffbf\001\002\000" +
    "\010\012\uffeb\013\uffeb\032\uffeb\001\002\000\004\012\130" +
    "\001\002\000\010\012\uffe8\013\uffe8\032\uffe8\001\002\000" +
    "\010\012\uffea\013\uffea\032\uffea\001\002\000\010\012\uffe9" +
    "\013\uffe9\032\uffe9\001\002\000\010\012\uffe7\013\uffe7\032" +
    "\uffe7\001\002\000\042\012\127\016\057\017\072\020\065" +
    "\021\070\022\056\023\061\024\063\025\066\026\062\027" +
    "\064\030\071\031\073\033\067\034\074\035\075\001\002" +
    "\000\044\012\uffd4\013\uffd4\016\uffd4\017\uffd4\020\uffd4\021" +
    "\uffd4\022\uffd4\023\uffd4\024\uffd4\025\uffd4\026\uffd4\027\uffd4" +
    "\030\uffd4\031\uffd4\033\uffd4\034\uffd4\035\uffd4\001\002\000" +
    "\064\005\055\006\045\007\041\010\043\011\044\012\uffbe" +
    "\013\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001" +
    "\002\000\044\012\uffb8\013\uffb8\016\057\017\072\020\065" +
    "\021\070\022\056\023\061\024\063\025\066\026\062\027" +
    "\064\030\071\031\073\033\067\034\074\035\075\001\002" +
    "\000\004\043\134\001\002\000\062\005\055\006\045\007" +
    "\041\010\043\011\044\013\uffbe\014\040\016\uffbe\017\050" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\047\043\042\001\002\000\004\032\135\001\002\000" +
    "\062\005\055\006\045\007\041\010\043\011\044\013\uffbe" +
    "\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002\000" +
    "\042\013\137\016\057\017\072\020\065\021\070\022\056" +
    "\023\061\024\063\025\066\026\062\027\064\030\071\031" +
    "\073\033\067\034\074\035\075\001\002\000\110\002\uffee" +
    "\004\uffee\005\uffee\006\uffee\007\uffee\010\uffee\011\uffee\013" +
    "\uffee\014\uffee\016\uffee\017\uffee\020\uffee\021\uffee\022\uffee" +
    "\023\uffee\024\uffee\025\uffee\026\uffee\027\uffee\030\uffee\031" +
    "\uffee\033\uffee\034\uffee\035\uffee\036\uffee\043\uffee\044\uffee" +
    "\045\uffee\051\uffee\054\uffee\055\uffee\056\uffee\057\uffee\060" +
    "\uffee\061\uffee\001\002\000\042\013\141\016\057\017\072" +
    "\020\065\021\070\022\056\023\061\024\063\025\066\026" +
    "\062\027\064\030\071\031\073\033\067\034\074\035\075" +
    "\001\002\000\004\043\143\001\002\000\004\012\uffdb\001" +
    "\002\000\010\032\154\047\153\050\155\001\002\000\004" +
    "\012\146\001\002\000\004\012\uffdc\001\002\000\004\053" +
    "\147\001\002\000\026\004\033\043\017\044\032\045\014" +
    "\051\016\055\030\056\010\057\023\060\026\061\021\001" +
    "\002\000\030\004\033\043\017\044\032\045\014\051\016" +
    "\054\152\055\030\056\010\057\023\060\026\061\021\001" +
    "\002\000\032\002\ufffe\004\ufffe\043\ufffe\044\ufffe\045\ufffe" +
    "\051\ufffe\054\ufffe\055\ufffe\056\ufffe\057\ufffe\060\ufffe\061" +
    "\ufffe\001\002\000\032\002\uffde\004\uffde\043\uffde\044\uffde" +
    "\045\uffde\051\uffde\054\uffde\055\uffde\056\uffde\057\uffde\060" +
    "\uffde\061\uffde\001\002\000\036\002\uffe5\004\uffe5\012\uffe5" +
    "\013\160\043\uffe5\044\uffe5\045\uffe5\051\uffe5\054\uffe5\055" +
    "\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\001\002\000\062" +
    "\005\055\006\045\007\041\010\043\011\044\012\uffbe\014" +
    "\040\016\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe" +
    "\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033" +
    "\uffbe\034\uffbe\035\uffbe\036\047\043\042\001\002\000\036" +
    "\002\uffe3\004\uffe3\012\uffe3\013\156\043\uffe3\044\uffe3\045" +
    "\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\001\002\000\034\002\uffe4\004\uffe4\012\uffe4\043" +
    "\uffe4\044\uffe4\045\uffe4\051\uffe4\054\uffe4\055\uffe4\056\uffe4" +
    "\057\uffe4\060\uffe4\061\uffe4\001\002\000\042\012\uffdd\016" +
    "\057\017\072\020\065\021\070\022\056\023\061\024\063" +
    "\025\066\026\062\027\064\030\071\031\073\033\067\034" +
    "\074\035\075\001\002\000\034\002\uffe6\004\uffe6\012\uffe6" +
    "\043\uffe6\044\uffe6\045\uffe6\051\uffe6\054\uffe6\055\uffe6\056" +
    "\uffe6\057\uffe6\060\uffe6\061\uffe6\001\002\000\062\005\055" +
    "\006\045\007\041\010\043\011\044\012\uffbe\014\040\016" +
    "\uffbe\017\050\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe" +
    "\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034" +
    "\uffbe\035\uffbe\036\047\043\042\001\002\000\042\012\163" +
    "\016\057\017\072\020\065\021\070\022\056\023\061\024" +
    "\063\025\066\026\062\027\064\030\071\031\073\033\067" +
    "\034\074\035\075\001\002\000\004\053\164\001\002\000" +
    "\026\004\033\043\017\044\032\045\014\051\016\055\030" +
    "\056\010\057\023\060\026\061\021\001\002\000\030\004" +
    "\033\043\017\044\032\045\014\051\016\054\166\055\030" +
    "\056\010\057\023\060\026\061\021\001\002\000\032\002" +
    "\uffda\004\uffda\043\uffda\044\uffda\045\uffda\051\uffda\054\uffda" +
    "\055\uffda\056\uffda\057\uffda\060\uffda\061\uffda\001\002\000" +
    "\004\015\170\001\002\000\014\037\120\040\123\041\124" +
    "\042\122\046\125\001\002\000\006\013\173\032\172\001" +
    "\002\000\062\005\055\006\045\007\041\010\043\011\044" +
    "\013\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001" +
    "\002\000\032\002\uffef\004\uffef\043\uffef\044\uffef\045\uffef" +
    "\051\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061" +
    "\uffef\001\002\000\042\013\175\016\057\017\072\020\065" +
    "\021\070\022\056\023\061\024\063\025\066\026\062\027" +
    "\064\030\071\031\073\033\067\034\074\035\075\001\002" +
    "\000\032\002\ufff0\004\ufff0\043\ufff0\044\ufff0\045\ufff0\051" +
    "\ufff0\054\ufff0\055\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0" +
    "\001\002\000\032\002\uffd7\004\uffd7\043\uffd7\044\uffd7\045" +
    "\uffd7\051\uffd7\054\uffd7\055\uffd7\056\uffd7\057\uffd7\060\uffd7" +
    "\061\uffd7\001\002\000\026\004\033\043\017\044\032\045" +
    "\014\051\016\055\030\056\010\057\023\060\026\061\021" +
    "\001\002\000\030\004\033\043\017\044\032\045\014\051" +
    "\016\054\201\055\030\056\010\057\023\060\026\061\021" +
    "\001\002\000\004\060\202\001\002\000\004\011\203\001" +
    "\002\000\062\005\055\006\045\007\041\010\043\011\044" +
    "\012\uffbe\014\040\016\uffbe\017\050\020\uffbe\021\uffbe\022" +
    "\uffbe\023\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe" +
    "\031\uffbe\033\uffbe\034\uffbe\035\uffbe\036\047\043\042\001" +
    "\002\000\042\012\205\016\057\017\072\020\065\021\070" +
    "\022\056\023\061\024\063\025\066\026\062\027\064\030" +
    "\071\031\073\033\067\034\074\035\075\001\002\000\004" +
    "\013\206\001\002\000\032\002\uffd9\004\uffd9\043\uffd9\044" +
    "\uffd9\045\uffd9\051\uffd9\054\uffd9\055\uffd9\056\uffd9\057\uffd9" +
    "\060\uffd9\061\uffd9\001\002\000\062\005\055\006\045\007" +
    "\041\010\043\011\044\012\uffbe\014\040\016\uffbe\017\050" +
    "\020\uffbe\021\uffbe\022\uffbe\023\uffbe\024\uffbe\025\uffbe\026" +
    "\uffbe\027\uffbe\030\uffbe\031\uffbe\033\uffbe\034\uffbe\035\uffbe" +
    "\036\047\043\042\001\002\000\042\012\211\016\057\017" +
    "\072\020\065\021\070\022\056\023\061\024\063\025\066" +
    "\026\062\027\064\030\071\031\073\033\067\034\074\035" +
    "\075\001\002\000\004\053\212\001\002\000\026\004\033" +
    "\043\017\044\032\045\014\051\016\055\030\056\010\057" +
    "\023\060\026\061\021\001\002\000\030\004\033\043\017" +
    "\044\032\045\014\051\016\054\214\055\030\056\010\057" +
    "\023\060\026\061\021\001\002\000\034\002\uffdf\004\uffdf" +
    "\043\uffdf\044\uffdf\045\uffdf\051\uffdf\052\216\054\uffdf\055" +
    "\uffdf\056\uffdf\057\uffdf\060\uffdf\061\uffdf\001\002\000\032" +
    "\002\uffe2\004\uffe2\043\uffe2\044\uffe2\045\uffe2\051\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\001\002" +
    "\000\006\051\016\053\217\001\002\000\026\004\033\043" +
    "\017\044\032\045\014\051\016\055\030\056\010\057\023" +
    "\060\026\061\021\001\002\000\032\002\uffe1\004\uffe1\043" +
    "\uffe1\044\uffe1\045\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1" +
    "\057\uffe1\060\uffe1\061\uffe1\001\002\000\030\004\033\043" +
    "\017\044\032\045\014\051\016\054\222\055\030\056\010" +
    "\057\023\060\026\061\021\001\002\000\032\002\uffe0\004" +
    "\uffe0\043\uffe0\044\uffe0\045\uffe0\051\uffe0\054\uffe0\055\uffe0" +
    "\056\uffe0\057\uffe0\060\uffe0\061\uffe0\001\002\000\032\002" +
    "\uffd8\004\uffd8\043\uffd8\044\uffd8\045\uffd8\051\uffd8\054\uffd8" +
    "\055\uffd8\056\uffd8\057\uffd8\060\uffd8\061\uffd8\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\221\000\040\002\033\003\010\004\003\006\011\013" +
    "\006\014\017\016\023\017\026\021\014\023\030\024\021" +
    "\026\004\027\005\030\012\031\024\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\034\004\150\006\011\013\006\014" +
    "\017\016\023\017\026\021\014\023\030\024\021\026\004" +
    "\027\005\030\012\031\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\016\005" +
    "\051\007\053\010\036\011\050\012\045\015\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\020\005\125\007\053" +
    "\010\036\011\050\012\045\015\052\020\120\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\116\007\053" +
    "\010\036\011\050\012\045\015\052\001\001\000\016\005" +
    "\115\007\053\010\036\011\050\012\045\015\052\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\016\005\114\007\053" +
    "\010\036\011\050\012\045\015\052\001\001\000\016\005" +
    "\113\007\053\010\036\011\050\012\045\015\052\001\001" +
    "\000\002\001\001\000\016\005\111\007\053\010\036\011" +
    "\050\012\045\015\052\001\001\000\016\005\110\007\053" +
    "\010\036\011\050\012\045\015\052\001\001\000\016\005" +
    "\107\007\053\010\036\011\050\012\045\015\052\001\001" +
    "\000\016\005\106\007\053\010\036\011\050\012\045\015" +
    "\052\001\001\000\016\005\105\007\053\010\036\011\050" +
    "\012\045\015\052\001\001\000\016\005\104\007\053\010" +
    "\036\011\050\012\045\015\052\001\001\000\016\005\103" +
    "\007\053\010\036\011\050\012\045\015\052\001\001\000" +
    "\016\005\102\007\053\010\036\011\050\012\045\015\052" +
    "\001\001\000\016\005\101\007\053\010\036\011\050\012" +
    "\045\015\052\001\001\000\016\005\100\007\053\010\036" +
    "\011\050\012\045\015\052\001\001\000\016\005\077\007" +
    "\053\010\036\011\050\012\045\015\052\001\001\000\016" +
    "\005\076\007\053\010\036\011\050\012\045\015\052\001" +
    "\001\000\016\005\075\007\053\010\036\011\050\012\045" +
    "\015\052\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\130\007\053\010\036\011" +
    "\050\012\045\015\052\001\001\000\002\001\001\000\004" +
    "\014\132\001\001\000\016\005\137\007\053\010\036\011" +
    "\050\012\045\015\052\001\001\000\002\001\001\000\016" +
    "\005\135\007\053\010\036\011\050\012\045\015\052\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\016\144\017\141\025\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\147\004\003\006\011\013" +
    "\006\014\017\016\023\017\026\021\014\023\030\024\021" +
    "\026\004\027\005\030\012\031\024\001\001\000\034\004" +
    "\150\006\011\013\006\014\017\016\023\017\026\021\014" +
    "\023\030\024\021\026\004\027\005\030\012\031\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\016\005\156\007\053\010\036\011\050\012\045\015" +
    "\052\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\161\007\053\010" +
    "\036\011\050\012\045\015\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\164\004\003\006\011\013" +
    "\006\014\017\016\023\017\026\021\014\023\030\024\021" +
    "\026\004\027\005\030\012\031\024\001\001\000\034\004" +
    "\150\006\011\013\006\014\017\016\023\017\026\021\014" +
    "\023\030\024\021\026\004\027\005\030\012\031\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\020\170" +
    "\001\001\000\002\001\001\000\016\005\173\007\053\010" +
    "\036\011\050\012\045\015\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\036\003\177\004\003\006\011\013\006\014\017\016\023" +
    "\017\026\021\014\023\030\024\021\026\004\027\005\030" +
    "\012\031\024\001\001\000\034\004\150\006\011\013\006" +
    "\014\017\016\023\017\026\021\014\023\030\024\021\026" +
    "\004\027\005\030\012\031\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\016\005\203\007\053\010\036\011" +
    "\050\012\045\015\052\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\016\005\207\007\053\010" +
    "\036\011\050\012\045\015\052\001\001\000\002\001\001" +
    "\000\002\001\001\000\036\003\212\004\003\006\011\013" +
    "\006\014\017\016\023\017\026\021\014\023\030\024\021" +
    "\026\004\027\005\030\012\031\024\001\001\000\034\004" +
    "\150\006\011\013\006\014\017\016\023\017\026\021\014" +
    "\023\030\024\021\026\004\027\005\030\012\031\024\001" +
    "\001\000\004\022\214\001\001\000\002\001\001\000\004" +
    "\021\217\001\001\000\036\003\220\004\003\006\011\013" +
    "\006\014\017\016\023\017\026\021\014\023\030\024\021" +
    "\026\004\027\005\030\012\031\024\001\001\000\002\001" +
    "\001\000\034\004\150\006\011\013\006\014\017\016\023" +
    "\017\026\021\014\023\030\024\021\026\004\027\005\030" +
    "\012\031\024\001\001\000\002\001\001\000\002\001\001" +
    "" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer l;
    Parser(Lexer l){this.l = l;}

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintactico en la Linea | " + (s.left) + " Columna | " + s.right+ " No se esperaba este componente | " + s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error sintactico irrecuperable en la Linea | " + (s.left)+ " Columna | "+ s.right+" Componente | " + s.value + " | No reconocido"); 
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= DOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // IMPRIMIR ::= T_PRINTLN P_LEFT EXPRESION P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(a,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // DECLARACION ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Boolean mut = (Boolean) m; RESULT = new Declaracion(b, c, a, mut.booleanValue(), aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // DECLARACION ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Boolean mut = (Boolean) m; RESULT = new Declaracion(b, null, a, mut.booleanValue(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // ASIGNACION ::= T_ID T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AsignacionVar(a,b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // MUTABILIDAD ::= T_VAR 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // MUTABILIDAD ::= T_CONST 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // TIPOSDECLARACION ::= T_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // TIPOSDECLARACION ::= T_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // TIPOSDECLARACION ::= T_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // TIPOSDECLARACION ::= T_BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // TIPOSDECLARACION ::= T_CHARACTER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // INCREMENTO ::= T_ID T_INCREMENT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // INCREMENTO ::= T_ID T_INCREMENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECREMENTO ::= T_ID T_DECREMENT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECREMENTO ::= T_ID T_DECREMENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // IF ::= T_IF P_LEFT EXPRESION P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER ELSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a,b,c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ELSE ::= T_ELSE IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ELSE ::= T_ELSE T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Else(a,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ELSE ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // FOR ::= T_FOR P_LEFT ASIGNACION EXPRESION T_SEMICOLON DECLARACIONFOR P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a,b,c,d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // DECLARACIONFOR ::= T_ID T_EQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // DECLARACIONFOR ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // DECLARACIONFOR ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // WHILE ::= T_WHILE P_LEFT EXPRESION P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // DOWHILE ::= T_DO T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER T_WHILE P_LEFT EXPRESION P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DoWhile(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // BREAK ::= T_BREAK T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CONTINUE ::= T_CONTINUE T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // EXPRESION ::= T_MINUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, Operadores.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // EXPRESION ::= T_ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // EXPRESION ::= P_LEFT EXPRESION P_RIGHT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // EXPRESION ::= TIPOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // EXPRESION ::= ARITMETICAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // EXPRESION ::= RELACIONALES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // EXPRESION ::= LOGICOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // EXPRESION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ARITMETICAS ::= EXPRESION T_PLUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.SUMA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ARITMETICAS ::= EXPRESION T_MINUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ARITMETICAS ::= EXPRESION T_TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.MULTIPLICACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ARITMETICAS ::= EXPRESION T_DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.DIVISION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // ARITMETICAS ::= EXPRESION T_POW EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.POTENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // ARITMETICAS ::= EXPRESION T_MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.MODULO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // RELACIONALES ::= EXPRESION T_TWOEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.IGUALIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // RELACIONALES ::= EXPRESION T_NOTEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.DIFERENTEIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // RELACIONALES ::= EXPRESION T_LESSTHAN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // RELACIONALES ::= EXPRESION T_LESSTHANEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // RELACIONALES ::= EXPRESION T_GREATERTHAN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // RELACIONALES ::= EXPRESION T_GREATERTHANEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // LOGICOS ::= EXPRESION T_OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // LOGICOS ::= EXPRESION T_AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // LOGICOS ::= EXPRESION T_XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // LOGICOS ::= T_NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,   OperadoresLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // TIPOS ::= 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // TIPOS ::= T_ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // TIPOS ::= T_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // TIPOS ::= T_DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // TIPOS ::= T_CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // TIPOS ::= T_BOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // CASTEO ::= P_LEFT TIPOSDECLARACION P_RIGHT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASTEO",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
