
//----------------------------------------------------
// The following code was generated by CUP v0.11b 20160615 (GIT 4ac7450)
//----------------------------------------------------

package Analyzers;

import java.util.*;
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import Abstracto.Instruccion;
import Simbolo.Tipo;
import Simbolo.tipoDato;
import Expresiones.Aritmeticas;
import Expresiones.Relacionales;
import Expresiones.Logicos;
import Expresiones.Operadores;
import Expresiones.OperadoresRelacionales;
import Expresiones.OperadoresLogicos;
import Excepciones.Errores;
import Instrucciones.Print;
import Instrucciones.Declaracion;
import Instrucciones.AsignacionVar;
import Instrucciones.Incremento;
import Instrucciones.Decremento;
import Instrucciones.If;
import Instrucciones.Else;
import Instrucciones.For;
import Instrucciones.Break;
import Instrucciones.Continue;
import Instrucciones.While;
import Instrucciones.DoWhile;
import Instrucciones.Metodo;
import Instrucciones.DeclaracionLista;
import Instrucciones.Append;
import Instrucciones.DeclaracionVectores;
import Instrucciones.DeclaracionVectores2;
import Instrucciones.AsignacionCombinada;
import Instrucciones.Remove;
import Instrucciones.Execute;
import Instrucciones.Llamada;
import Expresiones.Nativo;
import Expresiones.AccesoVar;
import Expresiones.Casteo;
import Expresiones.Round;
import Expresiones.AccesoCombinado;
import Expresiones.Length;
import java_cup.runtime.XMLElement;

/** CUP v0.11b 20160615 (GIT 4ac7450) generated parser.
  */
@SuppressWarnings({"rawtypes"})
public class Parser extends java_cup.runtime.lr_parser {

 public final Class getSymbolContainer() {
    return sym.class;
}

  /** Default constructor. */
  @Deprecated
  public Parser() {super();}

  /** Constructor which sets the default scanner. */
  @Deprecated
  public Parser(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Parser(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\160\000\002\002\004\000\002\002\003\000\002\002" +
    "\002\000\002\003\004\000\002\003\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\006\003\000\002\006\003\000\002\006\003" +
    "\000\002\006\003\000\002\006\003\000\002\006\003\000" +
    "\002\006\003\000\002\006\003\000\002\006\004\000\002" +
    "\010\007\000\002\015\011\000\002\015\007\000\002\034" +
    "\015\000\002\037\015\000\002\037\017\000\002\040\011" +
    "\000\002\040\014\000\002\004\005\000\002\004\003\000" +
    "\002\005\007\000\002\005\005\000\002\035\011\000\002" +
    "\016\006\000\002\043\003\000\002\043\003\000\002\044" +
    "\003\000\002\044\003\000\002\044\003\000\002\044\003" +
    "\000\002\044\003\000\002\044\003\000\002\020\005\000" +
    "\002\020\004\000\002\021\005\000\002\021\004\000\002" +
    "\022\012\000\002\023\004\000\002\023\006\000\002\023" +
    "\002\000\002\024\014\000\002\026\005\000\002\026\003" +
    "\000\002\026\003\000\002\030\011\000\002\031\013\000" +
    "\002\025\004\000\002\027\004\000\002\007\004\000\002" +
    "\007\003\000\002\007\005\000\002\007\003\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\007\003\000\002\007\003\000" +
    "\002\007\003\000\002\036\006\000\002\036\011\000\002" +
    "\042\010\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\013\005\000\002\013\005\000\002\013\005\000" +
    "\002\013\005\000\002\013\005\000\002\013\005\000\002" +
    "\014\005\000\002\014\005\000\002\014\005\000\002\014" +
    "\004\000\002\011\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\003\000\002\011\003\000\002\017\006\000" +
    "\002\032\006\000\002\033\012\000\002\033\011\000\002" +
    "\045\006\000\002\045\004\000\002\046\005\000\002\046" +
    "\003\000\002\047\010\000\002\047\007\000\002\050\007" +
    "\000\002\050\006\000\002\051\006" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\052\002\uffff\003\033\004\025\037\015\040" +
    "\004\041\037\042\043\043\053\044\054\045\022\046\041" +
    "\051\052\055\017\056\050\057\007\060\005\061\027\066" +
    "\055\067\011\074\031\001\002\000\016\012\uffd7\013\uffd7" +
    "\030\uffd7\032\uffd7\043\uffd7\062\uffd7\001\002\000\004\011" +
    "\u0106\001\002\000\054\002\ufff9\003\ufff9\004\ufff9\037\ufff9" +
    "\040\ufff9\041\ufff9\042\ufff9\043\ufff9\044\ufff9\045\ufff9\046" +
    "\ufff9\051\ufff9\054\ufff9\055\ufff9\056\ufff9\057\ufff9\060\ufff9" +
    "\061\ufff9\066\ufff9\067\ufff9\074\ufff9\001\002\000\004\013" +
    "\u0105\001\002\000\054\002\ufffc\003\ufffc\004\ufffc\037\ufffc" +
    "\040\ufffc\041\ufffc\042\ufffc\043\ufffc\044\ufffc\045\ufffc\046" +
    "\ufffc\051\ufffc\054\ufffc\055\ufffc\056\ufffc\057\ufffc\060\ufffc" +
    "\061\ufffc\066\ufffc\067\ufffc\074\ufffc\001\002\000\004\026" +
    "\373\001\002\000\054\002\uffed\003\uffed\004\uffed\037\uffed" +
    "\040\uffed\041\uffed\042\uffed\043\uffed\044\uffed\045\uffed\046" +
    "\uffed\051\uffed\054\uffed\055\uffed\056\uffed\057\uffed\060\uffed" +
    "\061\uffed\066\uffed\067\uffed\074\uffed\001\002\000\054\002" +
    "\ufff0\003\ufff0\004\ufff0\037\ufff0\040\ufff0\041\ufff0\042\ufff0" +
    "\043\ufff0\044\ufff0\045\ufff0\046\ufff0\051\ufff0\054\ufff0\055" +
    "\ufff0\056\ufff0\057\ufff0\060\ufff0\061\ufff0\066\ufff0\067\ufff0" +
    "\074\ufff0\001\002\000\054\002\ufffd\003\ufffd\004\ufffd\037" +
    "\ufffd\040\ufffd\041\ufffd\042\ufffd\043\ufffd\044\ufffd\045\ufffd" +
    "\046\ufffd\051\ufffd\054\ufffd\055\ufffd\056\ufffd\057\ufffd\060" +
    "\ufffd\061\ufffd\066\ufffd\067\ufffd\074\ufffd\001\002\000\016" +
    "\012\uffd8\013\uffd8\030\uffd8\032\uffd8\043\uffd8\062\uffd8\001" +
    "\002\000\054\002\ufff4\003\ufff4\004\ufff4\037\ufff4\040\ufff4" +
    "\041\ufff4\042\ufff4\043\ufff4\044\ufff4\045\ufff4\046\ufff4\051" +
    "\ufff4\054\ufff4\055\ufff4\056\ufff4\057\ufff4\060\ufff4\061\ufff4" +
    "\066\ufff4\067\ufff4\074\ufff4\001\002\000\004\011\354\001" +
    "\002\000\054\002\ufff8\003\ufff8\004\ufff8\037\ufff8\040\ufff8" +
    "\041\ufff8\042\ufff8\043\ufff8\044\ufff8\045\ufff8\046\ufff8\051" +
    "\ufff8\054\ufff8\055\ufff8\056\ufff8\057\ufff8\060\ufff8\061\ufff8" +
    "\066\ufff8\067\ufff8\074\ufff8\001\002\000\054\002\ufffa\003" +
    "\ufffa\004\ufffa\037\ufffa\040\ufffa\041\ufffa\042\ufffa\043\ufffa" +
    "\044\ufffa\045\ufffa\046\ufffa\051\ufffa\054\ufffa\055\ufffa\056" +
    "\ufffa\057\ufffa\060\ufffa\061\ufffa\066\ufffa\067\ufffa\074\ufffa" +
    "\001\002\000\004\043\uffd9\001\002\000\004\043\315\001" +
    "\002\000\054\002\uffef\003\uffef\004\uffef\037\uffef\040\uffef" +
    "\041\uffef\042\uffef\043\uffef\044\uffef\045\uffef\046\uffef\051" +
    "\uffef\054\uffef\055\uffef\056\uffef\057\uffef\060\uffef\061\uffef" +
    "\066\uffef\067\uffef\074\uffef\001\002\000\004\011\311\001" +
    "\002\000\054\002\ufff5\003\ufff5\004\ufff5\037\ufff5\040\ufff5" +
    "\041\ufff5\042\ufff5\043\ufff5\044\ufff5\045\ufff5\046\ufff5\051" +
    "\ufff5\054\ufff5\055\ufff5\056\ufff5\057\ufff5\060\ufff5\061\ufff5" +
    "\066\ufff5\067\ufff5\074\ufff5\001\002\000\004\053\301\001" +
    "\002\000\004\043\261\001\002\000\004\043\252\001\002" +
    "\000\054\002\uffee\003\uffee\004\uffee\037\uffee\040\uffee\041" +
    "\uffee\042\uffee\043\uffee\044\uffee\045\uffee\046\uffee\051\uffee" +
    "\054\uffee\055\uffee\056\uffee\057\uffee\060\uffee\061\uffee\066" +
    "\uffee\067\uffee\074\uffee\001\002\000\056\002\uffea\003\uffea" +
    "\004\uffea\013\251\037\uffea\040\uffea\041\uffea\042\uffea\043" +
    "\uffea\044\uffea\045\uffea\046\uffea\051\uffea\054\uffea\055\uffea" +
    "\056\uffea\057\uffea\060\uffea\061\uffea\066\uffea\067\uffea\074" +
    "\uffea\001\002\000\054\002\ufff1\003\ufff1\004\ufff1\037\ufff1" +
    "\040\ufff1\041\ufff1\042\ufff1\043\ufff1\044\ufff1\045\ufff1\046" +
    "\ufff1\051\ufff1\054\ufff1\055\ufff1\056\ufff1\057\ufff1\060\ufff1" +
    "\061\ufff1\066\ufff1\067\ufff1\074\ufff1\001\002\000\052\002" +
    "\000\003\033\004\025\037\015\040\004\041\037\042\043" +
    "\043\053\044\054\045\022\046\041\051\052\055\017\056" +
    "\050\057\007\060\005\061\027\066\055\067\011\074\031" +
    "\001\002\000\054\002\ufff6\003\ufff6\004\ufff6\037\ufff6\040" +
    "\ufff6\041\ufff6\042\ufff6\043\ufff6\044\ufff6\045\ufff6\046\ufff6" +
    "\051\ufff6\054\ufff6\055\ufff6\056\ufff6\057\ufff6\060\ufff6\061" +
    "\ufff6\066\ufff6\067\ufff6\074\ufff6\001\002\000\016\012\uffd6" +
    "\013\uffd6\030\uffd6\032\uffd6\043\uffd6\062\uffd6\001\002\000" +
    "\054\002\ufffb\003\ufffb\004\ufffb\037\ufffb\040\ufffb\041\ufffb" +
    "\042\ufffb\043\ufffb\044\ufffb\045\ufffb\046\ufffb\051\ufffb\054" +
    "\ufffb\055\ufffb\056\ufffb\057\ufffb\060\ufffb\061\ufffb\066\ufffb" +
    "\067\ufffb\074\ufffb\001\002\000\016\012\uffd4\013\uffd4\030" +
    "\uffd4\032\uffd4\043\uffd4\062\uffd4\001\002\000\054\002\ufff2" +
    "\003\ufff2\004\ufff2\037\ufff2\040\ufff2\041\ufff2\042\ufff2\043" +
    "\ufff2\044\ufff2\045\ufff2\046\ufff2\051\ufff2\054\ufff2\055\ufff2" +
    "\056\ufff2\057\ufff2\060\ufff2\061\ufff2\066\ufff2\067\ufff2\074" +
    "\ufff2\001\002\000\016\012\uffd5\013\uffd5\030\uffd5\032\uffd5" +
    "\043\uffd5\062\uffd5\001\002\000\054\002\uffec\003\uffec\004" +
    "\uffec\037\uffec\040\uffec\041\uffec\042\uffec\043\uffec\044\uffec" +
    "\045\uffec\046\uffec\051\uffec\054\uffec\055\uffec\056\uffec\057" +
    "\uffec\060\uffec\061\uffec\066\uffec\067\uffec\074\uffec\001\002" +
    "\000\054\002\ufff3\003\ufff3\004\ufff3\037\ufff3\040\ufff3\041" +
    "\ufff3\042\ufff3\043\ufff3\044\ufff3\045\ufff3\046\ufff3\051\ufff3" +
    "\054\ufff3\055\ufff3\056\ufff3\057\ufff3\060\ufff3\061\ufff3\066" +
    "\ufff3\067\ufff3\074\ufff3\001\002\000\054\002\ufff7\003\ufff7" +
    "\004\ufff7\037\ufff7\040\ufff7\041\ufff7\042\ufff7\043\ufff7\044" +
    "\ufff7\045\ufff7\046\ufff7\051\ufff7\054\ufff7\055\ufff7\056\ufff7" +
    "\057\ufff7\060\ufff7\061\ufff7\066\ufff7\067\ufff7\074\ufff7\001" +
    "\002\000\054\002\uffeb\003\uffeb\004\uffeb\037\uffeb\040\uffeb" +
    "\041\uffeb\042\uffeb\043\uffeb\044\uffeb\045\uffeb\046\uffeb\051" +
    "\uffeb\054\uffeb\055\uffeb\056\uffeb\057\uffeb\060\uffeb\061\uffeb" +
    "\066\uffeb\067\uffeb\074\uffeb\001\002\000\004\013\250\001" +
    "\002\000\004\002\247\001\002\000\004\011\232\001\002" +
    "\000\016\011\063\032\060\047\056\050\061\062\057\071" +
    "\062\001\002\000\004\043\uffda\001\002\000\016\012\uffd3" +
    "\013\uffd3\030\uffd3\032\uffd3\043\uffd3\062\uffd3\001\002\000" +
    "\060\002\uffd1\003\uffd1\004\uffd1\012\uffd1\013\231\037\uffd1" +
    "\040\uffd1\041\uffd1\042\uffd1\043\uffd1\044\uffd1\045\uffd1\046" +
    "\uffd1\051\uffd1\054\uffd1\055\uffd1\056\uffd1\057\uffd1\060\uffd1" +
    "\061\uffd1\066\uffd1\067\uffd1\074\uffd1\001\002\000\030\005" +
    "\104\006\110\007\103\010\067\011\107\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\030\005" +
    "\104\006\110\007\103\010\067\011\107\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\060\002" +
    "\uffcf\003\uffcf\004\uffcf\012\uffcf\013\213\037\uffcf\040\uffcf" +
    "\041\uffcf\042\uffcf\043\uffcf\044\uffcf\045\uffcf\046\uffcf\051" +
    "\uffcf\054\uffcf\055\uffcf\056\uffcf\057\uffcf\060\uffcf\061\uffcf" +
    "\066\uffcf\067\uffcf\074\uffcf\001\002\000\004\072\206\001" +
    "\002\000\032\005\104\006\110\007\103\010\067\011\107" +
    "\012\076\014\072\017\075\036\073\043\100\064\071\075" +
    "\066\001\002\000\050\012\uffbd\013\uffbd\016\uffbd\017\uffbd" +
    "\020\uffbd\021\uffbd\022\uffbd\023\uffbd\024\uffbd\025\uffbd\026" +
    "\uffbd\027\uffbd\030\uffbd\031\uffbd\033\uffbd\034\uffbd\035\uffbd" +
    "\063\uffbd\065\uffbd\001\002\000\050\012\uffbc\013\uffbc\016" +
    "\uffbc\017\uffbc\020\uffbc\021\uffbc\022\uffbc\023\uffbc\024\uffbc" +
    "\025\uffbc\026\uffbc\027\uffbc\030\uffbc\031\uffbc\033\uffbc\034" +
    "\uffbc\035\uffbc\063\uffbc\065\uffbc\001\002\000\004\011\203" +
    "\001\002\000\050\012\uffa0\013\uffa0\016\uffa0\017\uffa0\020" +
    "\uffa0\021\uffa0\022\uffa0\023\uffa0\024\uffa0\025\uffa0\026\uffa0" +
    "\027\uffa0\030\uffa0\031\uffa0\033\uffa0\034\uffa0\035\uffa0\063" +
    "\uffa0\065\uffa0\001\002\000\050\012\uffbf\013\uffbf\016\uffbf" +
    "\017\uffbf\020\uffbf\021\uffbf\022\uffbf\023\uffbf\024\uffbf\025" +
    "\uffbf\026\uffbf\027\uffbf\030\uffbf\031\uffbf\033\uffbf\034\uffbf" +
    "\035\uffbf\063\uffbf\065\uffbf\001\002\000\004\011\200\001" +
    "\002\000\050\012\uff9f\013\uff9f\016\uff9f\017\uff9f\020\uff9f" +
    "\021\uff9f\022\uff9f\023\uff9f\024\uff9f\025\uff9f\026\uff9f\027" +
    "\uff9f\030\uff9f\031\uff9f\033\uff9f\034\uff9f\035\uff9f\063\uff9f" +
    "\065\uff9f\001\002\000\030\005\104\006\110\007\103\010" +
    "\067\011\107\014\072\017\075\036\073\043\100\064\071" +
    "\075\066\001\002\000\050\012\uffbb\013\uffbb\016\uffbb\017" +
    "\uffbb\020\uffbb\021\uffbb\022\uffbb\023\uffbb\024\uffbb\025\uffbb" +
    "\026\uffbb\027\uffbb\030\uffbb\031\uffbb\033\uffbb\034\uffbb\035" +
    "\uffbb\063\uffbb\065\uffbb\001\002\000\030\005\104\006\110" +
    "\007\103\010\067\011\107\014\072\017\075\036\073\043" +
    "\100\064\071\075\066\001\002\000\004\013\175\001\002" +
    "\000\006\012\172\065\171\001\002\000\054\012\uffc1\013" +
    "\uffc1\016\uffc1\017\uffc1\020\uffc1\021\uffc1\022\uffc1\023\uffc1" +
    "\024\uffc1\025\uffc1\026\uffc1\027\uffc1\030\uffc1\031\uffc1\033" +
    "\uffc1\034\uffc1\035\uffc1\062\156\063\uffc1\065\uffc1\071\157" +
    "\001\002\000\050\012\uffb8\013\uffb8\016\uffb8\017\uffb8\020" +
    "\uffb8\021\uffb8\022\uffb8\023\uffb8\024\uffb8\025\uffb8\026\uffb8" +
    "\027\uffb8\030\uffb8\031\uffb8\033\uffb8\034\uffb8\035\uffb8\063" +
    "\uffb8\065\uffb8\001\002\000\050\012\uffba\013\uffba\016\uffba" +
    "\017\uffba\020\uffba\021\uffba\022\uffba\023\uffba\024\uffba\025" +
    "\uffba\026\uffba\027\uffba\030\uffba\031\uffba\033\uffba\034\uffba" +
    "\035\uffba\063\uffba\065\uffba\001\002\000\050\012\uffa1\013" +
    "\uffa1\016\uffa1\017\uffa1\020\uffa1\021\uffa1\022\uffa1\023\uffa1" +
    "\024\uffa1\025\uffa1\026\uffa1\027\uffa1\030\uffa1\031\uffa1\033" +
    "\uffa1\034\uffa1\035\uffa1\063\uffa1\065\uffa1\001\002\000\050" +
    "\012\uffa3\013\uffa3\016\uffa3\017\uffa3\020\uffa3\021\uffa3\022" +
    "\uffa3\023\uffa3\024\uffa3\025\uffa3\026\uffa3\027\uffa3\030\uffa3" +
    "\031\uffa3\033\uffa3\034\uffa3\035\uffa3\063\uffa3\065\uffa3\001" +
    "\002\000\050\012\uffb7\013\uffb7\016\uffb7\017\uffb7\020\uffb7" +
    "\021\uffb7\022\uffb7\023\uffb7\024\uffb7\025\uffb7\026\uffb7\027" +
    "\uffb7\030\uffb7\031\uffb7\033\uffb7\034\uffb7\035\uffb7\063\uffb7" +
    "\065\uffb7\001\002\000\050\012\uffb9\013\uffb9\016\uffb9\017" +
    "\uffb9\020\uffb9\021\uffb9\022\uffb9\023\uffb9\024\uffb9\025\uffb9" +
    "\026\uffb9\027\uffb9\030\uffb9\031\uffb9\033\uffb9\034\uffb9\035" +
    "\uffb9\063\uffb9\065\uffb9\001\002\000\044\005\104\006\110" +
    "\007\103\010\067\011\107\014\072\017\075\036\073\037" +
    "\015\040\004\041\037\042\043\043\100\046\041\064\071" +
    "\066\055\075\066\001\002\000\050\012\uffa2\013\uffa2\016" +
    "\uffa2\017\uffa2\020\uffa2\021\uffa2\022\uffa2\023\uffa2\024\uffa2" +
    "\025\uffa2\026\uffa2\027\uffa2\030\uffa2\031\uffa2\033\uffa2\034" +
    "\uffa2\035\uffa2\063\uffa2\065\uffa2\001\002\000\050\012\uffbe" +
    "\013\uffbe\016\uffbe\017\uffbe\020\uffbe\021\uffbe\022\uffbe\023" +
    "\uffbe\024\uffbe\025\uffbe\026\uffbe\027\uffbe\030\uffbe\031\uffbe" +
    "\033\uffbe\034\uffbe\035\uffbe\063\uffbe\065\uffbe\001\002\000" +
    "\044\012\uff97\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\065\uff97\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\050" +
    "\012\uffa5\013\uffa5\016\113\017\126\020\121\021\124\022" +
    "\114\023\115\024\117\025\122\026\116\027\120\030\125" +
    "\031\127\033\uffa5\034\uffa5\035\uffa5\063\uffa5\065\uffa5\001" +
    "\002\000\050\012\uffa6\013\uffa6\016\113\017\126\020\121" +
    "\021\124\022\114\023\115\024\117\025\122\026\116\027" +
    "\120\030\125\031\127\033\uffa6\034\uffa6\035\131\063\uffa6" +
    "\065\uffa6\001\002\000\050\012\uffa8\013\uffa8\016\113\017" +
    "\126\020\121\021\124\022\114\023\115\024\uffa8\025\uffa8" +
    "\026\uffa8\027\uffa8\030\uffa8\031\uffa8\033\uffa8\034\uffa8\035" +
    "\uffa8\063\uffa8\065\uffa8\001\002\000\050\012\uffb2\013\uffb2" +
    "\016\uffb2\017\uffb2\020\121\021\124\022\114\023\115\024" +
    "\uffb2\025\uffb2\026\uffb2\027\uffb2\030\uffb2\031\uffb2\033\uffb2" +
    "\034\uffb2\035\uffb2\063\uffb2\065\uffb2\001\002\000\050\012" +
    "\uffa9\013\uffa9\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\uffa9\025\uffa9\026\uffa9\027\uffa9\030\uffa9\031" +
    "\uffa9\033\uffa9\034\uffa9\035\uffa9\063\uffa9\065\uffa9\001\002" +
    "\000\050\012\uffb0\013\uffb0\016\uffb0\017\uffb0\020\uffb0\021" +
    "\uffb0\022\114\023\uffb0\024\uffb0\025\uffb0\026\uffb0\027\uffb0" +
    "\030\uffb0\031\uffb0\033\uffb0\034\uffb0\035\uffb0\063\uffb0\065" +
    "\uffb0\001\002\000\050\012\uffa7\013\uffa7\016\113\017\126" +
    "\020\121\021\124\022\114\023\115\024\117\025\122\026" +
    "\116\027\120\030\125\031\127\033\uffa7\034\130\035\131" +
    "\063\uffa7\065\uffa7\001\002\000\050\012\uffac\013\uffac\016" +
    "\113\017\126\020\121\021\124\022\114\023\115\024\uffac" +
    "\025\uffac\026\116\027\120\030\125\031\127\033\uffac\034" +
    "\uffac\035\uffac\063\uffac\065\uffac\001\002\000\050\012\uffb1" +
    "\013\uffb1\016\uffb1\017\uffb1\020\uffb1\021\uffb1\022\114\023" +
    "\uffb1\024\uffb1\025\uffb1\026\uffb1\027\uffb1\030\uffb1\031\uffb1" +
    "\033\uffb1\034\uffb1\035\uffb1\063\uffb1\065\uffb1\001\002\000" +
    "\050\012\uffaa\013\uffaa\016\113\017\126\020\121\021\124" +
    "\022\114\023\115\024\uffaa\025\uffaa\026\uffaa\027\uffaa\030" +
    "\uffaa\031\uffaa\033\uffaa\034\uffaa\035\uffaa\063\uffaa\065\uffaa" +
    "\001\002\000\050\012\uffad\013\uffad\016\113\017\126\020" +
    "\121\021\124\022\114\023\115\024\uffad\025\uffad\026\116" +
    "\027\120\030\125\031\127\033\uffad\034\uffad\035\uffad\063" +
    "\uffad\065\uffad\001\002\000\050\012\uffab\013\uffab\016\113" +
    "\017\126\020\121\021\124\022\114\023\115\024\uffab\025" +
    "\uffab\026\uffab\027\uffab\030\uffab\031\uffab\033\uffab\034\uffab" +
    "\035\uffab\063\uffab\065\uffab\001\002\000\050\012\uffae\013" +
    "\uffae\016\uffae\017\uffae\020\uffae\021\uffae\022\114\023\uffae" +
    "\024\uffae\025\uffae\026\uffae\027\uffae\030\uffae\031\uffae\033" +
    "\uffae\034\uffae\035\uffae\063\uffae\065\uffae\001\002\000\050" +
    "\012\uffaf\013\uffaf\016\uffaf\017\uffaf\020\uffaf\021\uffaf\022" +
    "\114\023\uffaf\024\uffaf\025\uffaf\026\uffaf\027\uffaf\030\uffaf" +
    "\031\uffaf\033\uffaf\034\uffaf\035\uffaf\063\uffaf\065\uffaf\001" +
    "\002\000\050\012\uffb3\013\uffb3\016\uffb3\017\uffb3\020\121" +
    "\021\124\022\114\023\115\024\uffb3\025\uffb3\026\uffb3\027" +
    "\uffb3\030\uffb3\031\uffb3\033\uffb3\034\uffb3\035\uffb3\063\uffb3" +
    "\065\uffb3\001\002\000\004\012\154\001\002\000\042\012" +
    "\153\016\113\017\126\020\121\021\124\022\114\023\115" +
    "\024\117\025\122\026\116\027\120\030\125\031\127\033" +
    "\123\034\130\035\131\001\002\000\050\012\uffc0\013\uffc0" +
    "\016\uffc0\017\uffc0\020\uffc0\021\uffc0\022\uffc0\023\uffc0\024" +
    "\uffc0\025\uffc0\026\uffc0\027\uffc0\030\uffc0\031\uffc0\033\uffc0" +
    "\034\uffc0\035\uffc0\063\uffc0\065\uffc0\001\002\000\030\005" +
    "\104\006\110\007\103\010\067\011\107\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\050\012" +
    "\uff9e\013\uff9e\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\063\uff9e\065\uff9e\001\002" +
    "\000\030\005\104\006\110\007\103\010\067\011\107\014" +
    "\072\017\075\036\073\043\100\064\071\075\066\001\002" +
    "\000\004\073\160\001\002\000\004\011\161\001\002\000" +
    "\030\005\104\006\110\007\103\010\067\011\107\014\072" +
    "\017\075\036\073\043\100\064\071\075\066\001\002\000" +
    "\042\012\163\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\001\002\000\050\012\uffb4" +
    "\013\uffb4\016\uffb4\017\uffb4\020\uffb4\021\uffb4\022\uffb4\023" +
    "\uffb4\024\uffb4\025\uffb4\026\uffb4\027\uffb4\030\uffb4\031\uffb4" +
    "\033\uffb4\034\uffb4\035\uffb4\063\uffb4\065\uffb4\001\002\000" +
    "\042\016\113\017\126\020\121\021\124\022\114\023\115" +
    "\024\117\025\122\026\116\027\120\030\125\031\127\033" +
    "\123\034\130\035\131\063\165\001\002\000\052\012\uffb6" +
    "\013\uffb6\016\uffb6\017\uffb6\020\uffb6\021\uffb6\022\uffb6\023" +
    "\uffb6\024\uffb6\025\uffb6\026\uffb6\027\uffb6\030\uffb6\031\uffb6" +
    "\033\uffb6\034\uffb6\035\uffb6\062\166\063\uffb6\065\uffb6\001" +
    "\002\000\030\005\104\006\110\007\103\010\067\011\107" +
    "\014\072\017\075\036\073\043\100\064\071\075\066\001" +
    "\002\000\042\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\063\170\001\002\000\050" +
    "\012\uffb5\013\uffb5\016\uffb5\017\uffb5\020\uffb5\021\uffb5\022" +
    "\uffb5\023\uffb5\024\uffb5\025\uffb5\026\uffb5\027\uffb5\030\uffb5" +
    "\031\uffb5\033\uffb5\034\uffb5\035\uffb5\063\uffb5\065\uffb5\001" +
    "\002\000\030\005\104\006\110\007\103\010\067\011\107" +
    "\014\072\017\075\036\073\043\100\064\071\075\066\001" +
    "\002\000\004\013\173\001\002\000\054\002\uff94\003\uff94" +
    "\004\uff94\037\uff94\040\uff94\041\uff94\042\uff94\043\uff94\044" +
    "\uff94\045\uff94\046\uff94\051\uff94\054\uff94\055\uff94\056\uff94" +
    "\057\uff94\060\uff94\061\uff94\066\uff94\067\uff94\074\uff94\001" +
    "\002\000\044\012\uff98\016\113\017\126\020\121\021\124" +
    "\022\114\023\115\024\117\025\122\026\116\027\120\030" +
    "\125\031\127\033\123\034\130\035\131\065\uff98\001\002" +
    "\000\054\002\uff93\003\uff93\004\uff93\037\uff93\040\uff93\041" +
    "\uff93\042\uff93\043\uff93\044\uff93\045\uff93\046\uff93\051\uff93" +
    "\054\uff93\055\uff93\056\uff93\057\uff93\060\uff93\061\uff93\066" +
    "\uff93\067\uff93\074\uff93\001\002\000\050\012\uffc2\013\uffc2" +
    "\016\uffc2\017\uffc2\020\uffc2\021\uffc2\022\uffc2\023\uffc2\024" +
    "\uffc2\025\uffc2\026\uffc2\027\uffc2\030\uffc2\031\uffc2\033\uffc2" +
    "\034\uffc2\035\uffc2\063\uffc2\065\uffc2\001\002\000\050\012" +
    "\uffa4\013\uffa4\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\uffa4\034\uffa4\035\uffa4\063\uffa4\065\uffa4\001\002" +
    "\000\030\005\104\006\110\007\103\010\067\011\107\014" +
    "\072\017\075\036\073\043\100\064\071\075\066\001\002" +
    "\000\042\012\202\016\113\017\126\020\121\021\124\022" +
    "\114\023\115\024\117\025\122\026\116\027\120\030\125" +
    "\031\127\033\123\034\130\035\131\001\002\000\050\012" +
    "\uff9d\013\uff9d\016\uff9d\017\uff9d\020\uff9d\021\uff9d\022\uff9d" +
    "\023\uff9d\024\uff9d\025\uff9d\026\uff9d\027\uff9d\030\uff9d\031" +
    "\uff9d\033\uff9d\034\uff9d\035\uff9d\063\uff9d\065\uff9d\001\002" +
    "\000\030\005\104\006\110\007\103\010\067\011\107\014" +
    "\072\017\075\036\073\043\100\064\071\075\066\001\002" +
    "\000\042\012\205\016\113\017\126\020\121\021\124\022" +
    "\114\023\115\024\117\025\122\026\116\027\120\030\125" +
    "\031\127\033\123\034\130\035\131\001\002\000\050\012" +
    "\uff92\013\uff92\016\uff92\017\uff92\020\uff92\021\uff92\022\uff92" +
    "\023\uff92\024\uff92\025\uff92\026\uff92\027\uff92\030\uff92\031" +
    "\uff92\033\uff92\034\uff92\035\uff92\063\uff92\065\uff92\001\002" +
    "\000\004\011\207\001\002\000\030\005\104\006\110\007" +
    "\103\010\067\011\107\014\072\017\075\036\073\043\100" +
    "\064\071\075\066\001\002\000\042\012\211\016\113\017" +
    "\126\020\121\021\124\022\114\023\115\024\117\025\122" +
    "\026\116\027\120\030\125\031\127\033\123\034\130\035" +
    "\131\001\002\000\004\013\212\001\002\000\054\002\uffdc" +
    "\003\uffdc\004\uffdc\037\uffdc\040\uffdc\041\uffdc\042\uffdc\043" +
    "\uffdc\044\uffdc\045\uffdc\046\uffdc\051\uffdc\054\uffdc\055\uffdc" +
    "\056\uffdc\057\uffdc\060\uffdc\061\uffdc\066\uffdc\067\uffdc\074" +
    "\uffdc\001\002\000\056\002\uffd0\003\uffd0\004\uffd0\012\uffd0" +
    "\037\uffd0\040\uffd0\041\uffd0\042\uffd0\043\uffd0\044\uffd0\045" +
    "\uffd0\046\uffd0\051\uffd0\054\uffd0\055\uffd0\056\uffd0\057\uffd0" +
    "\060\uffd0\061\uffd0\066\uffd0\067\uffd0\074\uffd0\001\002\000" +
    "\042\013\215\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\001\002\000\100\002\uffdb" +
    "\003\uffdb\004\uffdb\005\uffdb\006\uffdb\007\uffdb\010\uffdb\011" +
    "\uffdb\014\uffdb\017\uffdb\036\uffdb\037\uffdb\040\uffdb\041\uffdb" +
    "\042\uffdb\043\uffdb\044\uffdb\045\uffdb\046\uffdb\051\uffdb\054" +
    "\uffdb\055\uffdb\056\uffdb\057\uffdb\060\uffdb\061\uffdb\064\uffdb" +
    "\066\uffdb\067\uffdb\074\uffdb\075\uffdb\001\002\000\042\016" +
    "\113\017\126\020\121\021\124\022\114\023\115\024\117" +
    "\025\122\026\116\027\120\030\125\031\127\033\123\034" +
    "\130\035\131\063\217\001\002\000\006\032\221\062\220" +
    "\001\002\000\030\005\104\006\110\007\103\010\067\011" +
    "\107\014\072\017\075\036\073\043\100\064\071\075\066" +
    "\001\002\000\030\005\104\006\110\007\103\010\067\011" +
    "\107\014\072\017\075\036\073\043\100\064\071\075\066" +
    "\001\002\000\042\013\223\016\113\017\126\020\121\021" +
    "\124\022\114\023\115\024\117\025\122\026\116\027\120" +
    "\030\125\031\127\033\123\034\130\035\131\001\002\000" +
    "\054\002\uffe2\003\uffe2\004\uffe2\037\uffe2\040\uffe2\041\uffe2" +
    "\042\uffe2\043\uffe2\044\uffe2\045\uffe2\046\uffe2\051\uffe2\054" +
    "\uffe2\055\uffe2\056\uffe2\057\uffe2\060\uffe2\061\uffe2\066\uffe2" +
    "\067\uffe2\074\uffe2\001\002\000\042\016\113\017\126\020" +
    "\121\021\124\022\114\023\115\024\117\025\122\026\116" +
    "\027\120\030\125\031\127\033\123\034\130\035\131\063" +
    "\225\001\002\000\004\032\226\001\002\000\030\005\104" +
    "\006\110\007\103\010\067\011\107\014\072\017\075\036" +
    "\073\043\100\064\071\075\066\001\002\000\042\013\230" +
    "\016\113\017\126\020\121\021\124\022\114\023\115\024" +
    "\117\025\122\026\116\027\120\030\125\031\127\033\123" +
    "\034\130\035\131\001\002\000\054\002\uffe1\003\uffe1\004" +
    "\uffe1\037\uffe1\040\uffe1\041\uffe1\042\uffe1\043\uffe1\044\uffe1" +
    "\045\uffe1\046\uffe1\051\uffe1\054\uffe1\055\uffe1\056\uffe1\057" +
    "\uffe1\060\uffe1\061\uffe1\066\uffe1\067\uffe1\074\uffe1\001\002" +
    "\000\056\002\uffd2\003\uffd2\004\uffd2\012\uffd2\037\uffd2\040" +
    "\uffd2\041\uffd2\042\uffd2\043\uffd2\044\uffd2\045\uffd2\046\uffd2" +
    "\051\uffd2\054\uffd2\055\uffd2\056\uffd2\057\uffd2\060\uffd2\061" +
    "\uffd2\066\uffd2\067\uffd2\074\uffd2\001\002\000\030\005\104" +
    "\006\110\007\103\010\067\011\107\014\072\017\075\036" +
    "\073\043\100\064\071\075\066\001\002\000\042\012\234" +
    "\016\113\017\126\020\121\021\124\022\114\023\115\024" +
    "\117\025\122\026\116\027\120\030\125\031\127\033\123" +
    "\034\130\035\131\001\002\000\004\053\235\001\002\000" +
    "\050\003\033\004\025\037\015\040\004\041\037\042\043" +
    "\043\053\044\054\045\022\046\041\051\052\055\017\056" +
    "\050\057\007\060\005\061\027\066\055\067\011\074\031" +
    "\001\002\000\052\003\033\004\025\037\015\040\004\041" +
    "\037\042\043\043\053\044\054\045\022\046\041\051\052" +
    "\054\240\055\017\056\050\057\007\060\005\061\027\066" +
    "\055\067\011\074\031\001\002\000\054\002\ufffe\003\ufffe" +
    "\004\ufffe\037\ufffe\040\ufffe\041\ufffe\042\ufffe\043\ufffe\044" +
    "\ufffe\045\ufffe\046\ufffe\051\ufffe\054\ufffe\055\ufffe\056\ufffe" +
    "\057\ufffe\060\ufffe\061\ufffe\066\ufffe\067\ufffe\074\ufffe\001" +
    "\002\000\056\002\uffcb\003\uffcb\004\uffcb\037\uffcb\040\uffcb" +
    "\041\uffcb\042\uffcb\043\uffcb\044\uffcb\045\uffcb\046\uffcb\051" +
    "\uffcb\052\242\054\uffcb\055\uffcb\056\uffcb\057\uffcb\060\uffcb" +
    "\061\uffcb\066\uffcb\067\uffcb\074\uffcb\001\002\000\054\002" +
    "\uffce\003\uffce\004\uffce\037\uffce\040\uffce\041\uffce\042\uffce" +
    "\043\uffce\044\uffce\045\uffce\046\uffce\051\uffce\054\uffce\055" +
    "\uffce\056\uffce\057\uffce\060\uffce\061\uffce\066\uffce\067\uffce" +
    "\074\uffce\001\002\000\006\051\052\053\243\001\002\000" +
    "\050\003\033\004\025\037\015\040\004\041\037\042\043" +
    "\043\053\044\054\045\022\046\041\051\052\055\017\056" +
    "\050\057\007\060\005\061\027\066\055\067\011\074\031" +
    "\001\002\000\054\002\uffcd\003\uffcd\004\uffcd\037\uffcd\040" +
    "\uffcd\041\uffcd\042\uffcd\043\uffcd\044\uffcd\045\uffcd\046\uffcd" +
    "\051\uffcd\054\uffcd\055\uffcd\056\uffcd\057\uffcd\060\uffcd\061" +
    "\uffcd\066\uffcd\067\uffcd\074\uffcd\001\002\000\052\003\033" +
    "\004\025\037\015\040\004\041\037\042\043\043\053\044" +
    "\054\045\022\046\041\051\052\054\246\055\017\056\050" +
    "\057\007\060\005\061\027\066\055\067\011\074\031\001" +
    "\002\000\054\002\uffcc\003\uffcc\004\uffcc\037\uffcc\040\uffcc" +
    "\041\uffcc\042\uffcc\043\uffcc\044\uffcc\045\uffcc\046\uffcc\051" +
    "\uffcc\054\uffcc\055\uffcc\056\uffcc\057\uffcc\060\uffcc\061\uffcc" +
    "\066\uffcc\067\uffcc\074\uffcc\001\002\000\004\002\001\001" +
    "\002\000\054\002\uffc4\003\uffc4\004\uffc4\037\uffc4\040\uffc4" +
    "\041\uffc4\042\uffc4\043\uffc4\044\uffc4\045\uffc4\046\uffc4\051" +
    "\uffc4\054\uffc4\055\uffc4\056\uffc4\057\uffc4\060\uffc4\061\uffc4" +
    "\066\uffc4\067\uffc4\074\uffc4\001\002\000\054\002\uffe9\003" +
    "\uffe9\004\uffe9\037\uffe9\040\uffe9\041\uffe9\042\uffe9\043\uffe9" +
    "\044\uffe9\045\uffe9\046\uffe9\051\uffe9\054\uffe9\055\uffe9\056" +
    "\uffe9\057\uffe9\060\uffe9\061\uffe9\066\uffe9\067\uffe9\074\uffe9" +
    "\001\002\000\004\011\253\001\002\000\032\005\104\006" +
    "\110\007\103\010\067\011\107\012\254\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\004\013" +
    "\260\001\002\000\006\012\256\065\171\001\002\000\004" +
    "\013\257\001\002\000\054\002\uff96\003\uff96\004\uff96\037" +
    "\uff96\040\uff96\041\uff96\042\uff96\043\uff96\044\uff96\045\uff96" +
    "\046\uff96\051\uff96\054\uff96\055\uff96\056\uff96\057\uff96\060" +
    "\uff96\061\uff96\066\uff96\067\uff96\074\uff96\001\002\000\054" +
    "\002\uff95\003\uff95\004\uff95\037\uff95\040\uff95\041\uff95\042" +
    "\uff95\043\uff95\044\uff95\045\uff95\046\uff95\051\uff95\054\uff95" +
    "\055\uff95\056\uff95\057\uff95\060\uff95\061\uff95\066\uff95\067" +
    "\uff95\074\uff95\001\002\000\004\011\262\001\002\000\020" +
    "\012\264\037\015\040\004\041\037\042\043\046\041\066" +
    "\055\001\002\000\004\043\300\001\002\000\004\053\275" +
    "\001\002\000\006\012\267\065\266\001\002\000\016\037" +
    "\015\040\004\041\037\042\043\046\041\066\055\001\002" +
    "\000\004\053\270\001\002\000\050\003\033\004\025\037" +
    "\015\040\004\041\037\042\043\043\053\044\054\045\022" +
    "\046\041\051\052\055\017\056\050\057\007\060\005\061" +
    "\027\066\055\067\011\074\031\001\002\000\052\003\033" +
    "\004\025\037\015\040\004\041\037\042\043\043\053\044" +
    "\054\045\022\046\041\051\052\054\272\055\017\056\050" +
    "\057\007\060\005\061\027\066\055\067\011\074\031\001" +
    "\002\000\054\002\uff9c\003\uff9c\004\uff9c\037\uff9c\040\uff9c" +
    "\041\uff9c\042\uff9c\043\uff9c\044\uff9c\045\uff9c\046\uff9c\051" +
    "\uff9c\054\uff9c\055\uff9c\056\uff9c\057\uff9c\060\uff9c\061\uff9c" +
    "\066\uff9c\067\uff9c\074\uff9c\001\002\000\004\043\274\001" +
    "\002\000\006\012\uff9a\065\uff9a\001\002\000\050\003\033" +
    "\004\025\037\015\040\004\041\037\042\043\043\053\044" +
    "\054\045\022\046\041\051\052\055\017\056\050\057\007" +
    "\060\005\061\027\066\055\067\011\074\031\001\002\000" +
    "\052\003\033\004\025\037\015\040\004\041\037\042\043" +
    "\043\053\044\054\045\022\046\041\051\052\054\277\055" +
    "\017\056\050\057\007\060\005\061\027\066\055\067\011" +
    "\074\031\001\002\000\054\002\uff9b\003\uff9b\004\uff9b\037" +
    "\uff9b\040\uff9b\041\uff9b\042\uff9b\043\uff9b\044\uff9b\045\uff9b" +
    "\046\uff9b\051\uff9b\054\uff9b\055\uff9b\056\uff9b\057\uff9b\060" +
    "\uff9b\061\uff9b\066\uff9b\067\uff9b\074\uff9b\001\002\000\006" +
    "\012\uff99\065\uff99\001\002\000\050\003\033\004\025\037" +
    "\015\040\004\041\037\042\043\043\053\044\054\045\022" +
    "\046\041\051\052\055\017\056\050\057\007\060\005\061" +
    "\027\066\055\067\011\074\031\001\002\000\052\003\033" +
    "\004\025\037\015\040\004\041\037\042\043\043\053\044" +
    "\054\045\022\046\041\051\052\054\303\055\017\056\050" +
    "\057\007\060\005\061\027\066\055\067\011\074\031\001" +
    "\002\000\004\060\304\001\002\000\004\011\305\001\002" +
    "\000\030\005\104\006\110\007\103\010\067\011\107\014" +
    "\072\017\075\036\073\043\100\064\071\075\066\001\002" +
    "\000\042\012\307\016\113\017\126\020\121\021\124\022" +
    "\114\023\115\024\117\025\122\026\116\027\120\030\125" +
    "\031\127\033\123\034\130\035\131\001\002\000\004\013" +
    "\310\001\002\000\054\002\uffc5\003\uffc5\004\uffc5\037\uffc5" +
    "\040\uffc5\041\uffc5\042\uffc5\043\uffc5\044\uffc5\045\uffc5\046" +
    "\uffc5\051\uffc5\054\uffc5\055\uffc5\056\uffc5\057\uffc5\060\uffc5" +
    "\061\uffc5\066\uffc5\067\uffc5\074\uffc5\001\002\000\030\005" +
    "\104\006\110\007\103\010\067\011\107\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\042\012" +
    "\313\016\113\017\126\020\121\021\124\022\114\023\115" +
    "\024\117\025\122\026\116\027\120\030\125\031\127\033" +
    "\123\034\130\035\131\001\002\000\004\013\314\001\002" +
    "\000\054\002\uffe8\003\uffe8\004\uffe8\037\uffe8\040\uffe8\041" +
    "\uffe8\042\uffe8\043\uffe8\044\uffe8\045\uffe8\046\uffe8\051\uffe8" +
    "\054\uffe8\055\uffe8\056\uffe8\057\uffe8\060\uffe8\061\uffe8\066" +
    "\uffe8\067\uffe8\074\uffe8\001\002\000\004\015\316\001\002" +
    "\000\016\037\015\040\004\041\037\042\043\046\041\066" +
    "\055\001\002\000\010\013\321\032\322\062\320\001\002" +
    "\000\004\063\325\001\002\000\054\002\uffe6\003\uffe6\004" +
    "\uffe6\037\uffe6\040\uffe6\041\uffe6\042\uffe6\043\uffe6\044\uffe6" +
    "\045\uffe6\046\uffe6\051\uffe6\054\uffe6\055\uffe6\056\uffe6\057" +
    "\uffe6\060\uffe6\061\uffe6\066\uffe6\067\uffe6\074\uffe6\001\002" +
    "\000\030\005\104\006\110\007\103\010\067\011\107\014" +
    "\072\017\075\036\073\043\100\064\071\075\066\001\002" +
    "\000\042\013\324\016\113\017\126\020\121\021\124\022" +
    "\114\023\115\024\117\025\122\026\116\027\120\030\125" +
    "\031\127\033\123\034\130\035\131\001\002\000\054\002" +
    "\uffe7\003\uffe7\004\uffe7\037\uffe7\040\uffe7\041\uffe7\042\uffe7" +
    "\043\uffe7\044\uffe7\045\uffe7\046\uffe7\051\uffe7\054\uffe7\055" +
    "\uffe7\056\uffe7\057\uffe7\060\uffe7\061\uffe7\066\uffe7\067\uffe7" +
    "\074\uffe7\001\002\000\006\032\327\062\326\001\002\000" +
    "\004\063\337\001\002\000\004\062\330\001\002\000\030" +
    "\005\104\006\110\007\103\010\067\011\107\014\072\017" +
    "\075\036\073\043\100\064\071\075\066\001\002\000\006" +
    "\063\334\065\333\001\002\000\044\016\113\017\126\020" +
    "\121\021\124\022\114\023\115\024\117\025\122\026\116" +
    "\027\120\030\125\031\127\033\123\034\130\035\131\063" +
    "\uffdf\065\uffdf\001\002\000\030\005\104\006\110\007\103" +
    "\010\067\011\107\014\072\017\075\036\073\043\100\064" +
    "\071\075\066\001\002\000\004\013\335\001\002\000\054" +
    "\002\uffe4\003\uffe4\004\uffe4\037\uffe4\040\uffe4\041\uffe4\042" +
    "\uffe4\043\uffe4\044\uffe4\045\uffe4\046\uffe4\051\uffe4\054\uffe4" +
    "\055\uffe4\056\uffe4\057\uffe4\060\uffe4\061\uffe4\066\uffe4\067" +
    "\uffe4\074\uffe4\001\002\000\044\016\113\017\126\020\121" +
    "\021\124\022\114\023\115\024\117\025\122\026\116\027" +
    "\120\030\125\031\127\033\123\034\130\035\131\063\uffe0" +
    "\065\uffe0\001\002\000\004\032\340\001\002\000\004\062" +
    "\341\001\002\000\004\062\342\001\002\000\030\005\104" +
    "\006\110\007\103\010\067\011\107\014\072\017\075\036" +
    "\073\043\100\064\071\075\066\001\002\000\006\063\345" +
    "\065\344\001\002\000\004\062\347\001\002\000\004\013" +
    "\346\001\002\000\054\002\uffe3\003\uffe3\004\uffe3\037\uffe3" +
    "\040\uffe3\041\uffe3\042\uffe3\043\uffe3\044\uffe3\045\uffe3\046" +
    "\uffe3\051\uffe3\054\uffe3\055\uffe3\056\uffe3\057\uffe3\060\uffe3" +
    "\061\uffe3\066\uffe3\067\uffe3\074\uffe3\001\002\000\030\005" +
    "\104\006\110\007\103\010\067\011\107\014\072\017\075" +
    "\036\073\043\100\064\071\075\066\001\002\000\006\063" +
    "\351\065\333\001\002\000\006\063\uffde\065\uffde\001\002" +
    "\000\006\063\353\065\333\001\002\000\006\063\uffdd\065" +
    "\uffdd\001\002\000\004\043\356\001\002\000\030\005\104" +
    "\006\110\007\103\010\067\011\107\014\072\017\075\036" +
    "\073\043\100\064\071\075\066\001\002\000\004\032\060" +
    "\001\002\000\042\013\360\016\113\017\126\020\121\021" +
    "\124\022\114\023\115\024\117\025\122\026\116\027\120" +
    "\030\125\031\127\033\123\034\130\035\131\001\002\000" +
    "\004\043\362\001\002\000\004\012\uffc7\001\002\000\010" +
    "\032\371\047\056\050\061\001\002\000\004\012\365\001" +
    "\002\000\004\012\uffc8\001\002\000\004\053\366\001\002" +
    "\000\050\003\033\004\025\037\015\040\004\041\037\042" +
    "\043\043\053\044\054\045\022\046\041\051\052\055\017" +
    "\056\050\057\007\060\005\061\027\066\055\067\011\074" +
    "\031\001\002\000\052\003\033\004\025\037\015\040\004" +
    "\041\037\042\043\043\053\044\054\045\022\046\041\051" +
    "\052\054\370\055\017\056\050\057\007\060\005\061\027" +
    "\066\055\067\011\074\031\001\002\000\054\002\uffca\003" +
    "\uffca\004\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca" +
    "\044\uffca\045\uffca\046\uffca\051\uffca\054\uffca\055\uffca\056" +
    "\uffca\057\uffca\060\uffca\061\uffca\066\uffca\067\uffca\074\uffca" +
    "\001\002\000\030\005\104\006\110\007\103\010\067\011" +
    "\107\014\072\017\075\036\073\043\100\064\071\075\066" +
    "\001\002\000\042\012\uffc9\016\113\017\126\020\121\021" +
    "\124\022\114\023\115\024\117\025\122\026\116\027\120" +
    "\030\125\031\127\033\123\034\130\035\131\001\002\000" +
    "\016\037\015\040\004\041\037\042\043\046\041\066\055" +
    "\001\002\000\004\030\375\001\002\000\004\043\376\001" +
    "\002\000\004\032\377\001\002\000\004\070\u0100\001\002" +
    "\000\004\067\u0101\001\002\000\004\011\u0102\001\002\000" +
    "\004\012\u0103\001\002\000\004\013\u0104\001\002\000\054" +
    "\002\uffe5\003\uffe5\004\uffe5\037\uffe5\040\uffe5\041\uffe5\042" +
    "\uffe5\043\uffe5\044\uffe5\045\uffe5\046\uffe5\051\uffe5\054\uffe5" +
    "\055\uffe5\056\uffe5\057\uffe5\060\uffe5\061\uffe5\066\uffe5\067" +
    "\uffe5\074\uffe5\001\002\000\054\002\uffc3\003\uffc3\004\uffc3" +
    "\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043\uffc3\044\uffc3\045" +
    "\uffc3\046\uffc3\051\uffc3\054\uffc3\055\uffc3\056\uffc3\057\uffc3" +
    "\060\uffc3\061\uffc3\066\uffc3\067\uffc3\074\uffc3\001\002\000" +
    "\030\005\104\006\110\007\103\010\067\011\107\014\072" +
    "\017\075\036\073\043\100\064\071\075\066\001\002\000" +
    "\042\012\u0108\016\113\017\126\020\121\021\124\022\114" +
    "\023\115\024\117\025\122\026\116\027\120\030\125\031" +
    "\127\033\123\034\130\035\131\001\002\000\004\053\u0109" +
    "\001\002\000\050\003\033\004\025\037\015\040\004\041" +
    "\037\042\043\043\053\044\054\045\022\046\041\051\052" +
    "\055\017\056\050\057\007\060\005\061\027\066\055\067" +
    "\011\074\031\001\002\000\052\003\033\004\025\037\015" +
    "\040\004\041\037\042\043\043\053\044\054\045\022\046" +
    "\041\051\052\054\u010b\055\017\056\050\057\007\060\005" +
    "\061\027\066\055\067\011\074\031\001\002\000\054\002" +
    "\uffc6\003\uffc6\004\uffc6\037\uffc6\040\uffc6\041\uffc6\042\uffc6" +
    "\043\uffc6\044\uffc6\045\uffc6\046\uffc6\051\uffc6\054\uffc6\055" +
    "\uffc6\056\uffc6\057\uffc6\060\uffc6\061\uffc6\066\uffc6\067\uffc6" +
    "\074\uffc6\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u0109\000\060\002\050\003\034\006\013\010\007\015" +
    "\037\016\035\020\023\021\031\022\025\024\015\025\033" +
    "\027\012\030\044\031\041\033\011\034\020\035\017\037" +
    "\005\040\045\043\022\044\027\047\043\050\046\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\054\006\236" +
    "\010\007\015\037\016\035\020\023\021\031\022\025\024" +
    "\015\025\033\027\012\030\044\031\041\033\011\034\020" +
    "\035\017\037\005\040\045\043\022\044\027\047\043\050" +
    "\046\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\215\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\026\007\213\011\067\012\110\013" +
    "\063\014\064\017\073\032\101\036\105\042\100\051\104" +
    "\001\001\000\002\001\001\000\002\001\001\000\030\007" +
    "\111\011\067\012\110\013\063\014\064\017\073\032\101" +
    "\036\105\042\100\046\076\051\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\176\011\067\012\110\013\063\014\064\017\073" +
    "\032\101\036\105\042\100\051\104\001\001\000\002\001" +
    "\001\000\026\007\175\011\067\012\110\013\063\014\064" +
    "\017\073\032\101\036\105\042\100\051\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\030\007\151" +
    "\011\067\012\110\013\063\014\064\017\073\032\101\036" +
    "\105\042\100\044\150\051\104\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\026\007\147\011" +
    "\067\012\110\013\063\014\064\017\073\032\101\036\105" +
    "\042\100\051\104\001\001\000\026\007\146\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\026\007\145\011\067\012\110\013" +
    "\063\014\064\017\073\032\101\036\105\042\100\051\104" +
    "\001\001\000\026\007\144\011\067\012\110\013\063\014" +
    "\064\017\073\032\101\036\105\042\100\051\104\001\001" +
    "\000\026\007\143\011\067\012\110\013\063\014\064\017" +
    "\073\032\101\036\105\042\100\051\104\001\001\000\026" +
    "\007\142\011\067\012\110\013\063\014\064\017\073\032" +
    "\101\036\105\042\100\051\104\001\001\000\026\007\141" +
    "\011\067\012\110\013\063\014\064\017\073\032\101\036" +
    "\105\042\100\051\104\001\001\000\026\007\140\011\067" +
    "\012\110\013\063\014\064\017\073\032\101\036\105\042" +
    "\100\051\104\001\001\000\026\007\137\011\067\012\110" +
    "\013\063\014\064\017\073\032\101\036\105\042\100\051" +
    "\104\001\001\000\026\007\136\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\051\104\001" +
    "\001\000\026\007\135\011\067\012\110\013\063\014\064" +
    "\017\073\032\101\036\105\042\100\051\104\001\001\000" +
    "\026\007\134\011\067\012\110\013\063\014\064\017\073" +
    "\032\101\036\105\042\100\051\104\001\001\000\026\007" +
    "\133\011\067\012\110\013\063\014\064\017\073\032\101" +
    "\036\105\042\100\051\104\001\001\000\026\007\132\011" +
    "\067\012\110\013\063\014\064\017\073\032\101\036\105" +
    "\042\100\051\104\001\001\000\026\007\131\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\026" +
    "\007\154\011\067\012\110\013\063\014\064\017\073\032" +
    "\101\036\105\042\100\051\104\001\001\000\002\001\001" +
    "\000\026\007\163\011\067\012\110\013\063\014\064\017" +
    "\073\032\101\036\105\042\100\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\161\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\026\007\166\011\067" +
    "\012\110\013\063\014\064\017\073\032\101\036\105\042" +
    "\100\051\104\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\173\011\067\012\110\013\063\014\064\017" +
    "\073\032\101\036\105\042\100\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\026\007\200" +
    "\011\067\012\110\013\063\014\064\017\073\032\101\036" +
    "\105\042\100\051\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\203\011\067\012\110\013\063\014" +
    "\064\017\073\032\101\036\105\042\100\051\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\207\011\067\012\110\013\063\014\064\017\073" +
    "\032\101\036\105\042\100\051\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\223\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\051\104\001" +
    "\001\000\026\007\221\011\067\012\110\013\063\014\064" +
    "\017\073\032\101\036\105\042\100\051\104\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\026\007\226\011\067\012\110\013\063\014" +
    "\064\017\073\032\101\036\105\042\100\051\104\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\026\007\232\011\067\012\110\013\063\014\064\017\073" +
    "\032\101\036\105\042\100\051\104\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\235\006\013\010\007" +
    "\015\037\016\035\020\023\021\031\022\025\024\015\025" +
    "\033\027\012\030\044\031\041\033\011\034\020\035\017" +
    "\037\005\040\045\043\022\044\027\047\043\050\046\001" +
    "\001\000\054\006\236\010\007\015\037\016\035\020\023" +
    "\021\031\022\025\024\015\025\033\027\012\030\044\031" +
    "\041\033\011\034\020\035\017\037\005\040\045\043\022" +
    "\044\027\047\043\050\046\001\001\000\002\001\001\000" +
    "\004\023\240\001\001\000\002\001\001\000\004\022\243" +
    "\001\001\000\056\003\244\006\013\010\007\015\037\016" +
    "\035\020\023\021\031\022\025\024\015\025\033\027\012" +
    "\030\044\031\041\033\011\034\020\035\017\037\005\040" +
    "\045\043\022\044\027\047\043\050\046\001\001\000\002" +
    "\001\001\000\054\006\236\010\007\015\037\016\035\020" +
    "\023\021\031\022\025\024\015\025\033\027\012\030\044" +
    "\031\041\033\011\034\020\035\017\037\005\040\045\043" +
    "\022\044\027\047\043\050\046\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\030\007\111\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\046\254\051" +
    "\104\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\044\262\045\264\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\044\272\001" +
    "\001\000\002\001\001\000\056\003\270\006\013\010\007" +
    "\015\037\016\035\020\023\021\031\022\025\024\015\025" +
    "\033\027\012\030\044\031\041\033\011\034\020\035\017" +
    "\037\005\040\045\043\022\044\027\047\043\050\046\001" +
    "\001\000\054\006\236\010\007\015\037\016\035\020\023" +
    "\021\031\022\025\024\015\025\033\027\012\030\044\031" +
    "\041\033\011\034\020\035\017\037\005\040\045\043\022" +
    "\044\027\047\043\050\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\056\003\275\006\013" +
    "\010\007\015\037\016\035\020\023\021\031\022\025\024" +
    "\015\025\033\027\012\030\044\031\041\033\011\034\020" +
    "\035\017\037\005\040\045\043\022\044\027\047\043\050" +
    "\046\001\001\000\054\006\236\010\007\015\037\016\035" +
    "\020\023\021\031\022\025\024\015\025\033\027\012\030" +
    "\044\031\041\033\011\034\020\035\017\037\005\040\045" +
    "\043\022\044\027\047\043\050\046\001\001\000\002\001" +
    "\001\000\002\001\001\000\056\003\301\006\013\010\007" +
    "\015\037\016\035\020\023\021\031\022\025\024\015\025" +
    "\033\027\012\030\044\031\041\033\011\034\020\035\017" +
    "\037\005\040\045\043\022\044\027\047\043\050\046\001" +
    "\001\000\054\006\236\010\007\015\037\016\035\020\023" +
    "\021\031\022\025\024\015\025\033\027\012\030\044\031" +
    "\041\033\011\034\020\035\017\037\005\040\045\043\022" +
    "\044\027\047\043\050\046\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\305\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\051\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\026\007\311\011\067\012\110\013\063\014\064\017" +
    "\073\032\101\036\105\042\100\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\044\316\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\322\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\030" +
    "\004\330\007\331\011\067\012\110\013\063\014\064\017" +
    "\073\032\101\036\105\042\100\051\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\026\007\335\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\005\342\001\001\000\030\004\351\007\331\011\067\012" +
    "\110\013\063\014\064\017\073\032\101\036\105\042\100" +
    "\051\104\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\030\004\347\007\331" +
    "\011\067\012\110\013\063\014\064\017\073\032\101\036" +
    "\105\042\100\051\104\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\016" +
    "\354\001\001\000\026\007\356\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\051\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\020\363" +
    "\021\360\026\362\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\056\003\366\006\013\010\007\015\037\016\035\020" +
    "\023\021\031\022\025\024\015\025\033\027\012\030\044" +
    "\031\041\033\011\034\020\035\017\037\005\040\045\043" +
    "\022\044\027\047\043\050\046\001\001\000\054\006\236" +
    "\010\007\015\037\016\035\020\023\021\031\022\025\024" +
    "\015\025\033\027\012\030\044\031\041\033\011\034\020" +
    "\035\017\037\005\040\045\043\022\044\027\047\043\050" +
    "\046\001\001\000\002\001\001\000\026\007\371\011\067" +
    "\012\110\013\063\014\064\017\073\032\101\036\105\042" +
    "\100\051\104\001\001\000\002\001\001\000\004\044\373" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\026\007\u0106\011\067\012\110\013\063" +
    "\014\064\017\073\032\101\036\105\042\100\051\104\001" +
    "\001\000\002\001\001\000\002\001\001\000\056\003\u0109" +
    "\006\013\010\007\015\037\016\035\020\023\021\031\022" +
    "\025\024\015\025\033\027\012\030\044\031\041\033\011" +
    "\034\020\035\017\037\005\040\045\043\022\044\027\047" +
    "\043\050\046\001\001\000\054\006\236\010\007\015\037" +
    "\016\035\020\023\021\031\022\025\024\015\025\033\027" +
    "\012\030\044\031\041\033\011\034\020\035\017\037\005" +
    "\040\045\043\022\044\027\047\043\050\046\001\001\000" +
    "\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Parser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Parser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Parser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}




    Lexer l;
    Parser(Lexer l){this.l = l;}

    public LinkedList<Errores> ListaErrores = new LinkedList<>();

    public void syntax_error(Symbol s){ 
        ListaErrores.add(new Errores("SINTACTICO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    } 

    public void unrecovered_syntax_error(Symbol s){ 
        ListaErrores.add(new Errores("SINTACTICO NO RECUPERABLE", "No se esperaba el componente: " + s.value, s.left, s.right));
    }  


/** Cup generated class to encapsulate user supplied action code.*/
@SuppressWarnings({"rawtypes", "unchecked", "unused"})
class CUP$Parser$actions {

  
  private final Parser parser;

  /** Constructor */
  CUP$Parser$actions(Parser parser) {
    this.parser = parser;
  }

  /** Method 0 with the actual generated action code for actions 0 to 300. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action_part00000000(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Parser$result;

      /* select the action based on the action number */
      switch (CUP$Parser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> start_val = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		RESULT = start_val;
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Parser$parser.done_parsing();
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= LISTAINSTRUCCIONES 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT= a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= 
            {
              LinkedList<Instruccion> RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a;  RESULT.add(b); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // LISTAINSTRUCCIONES ::= INSTRUCCION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTAINSTRUCCIONES",1, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INSTRUCCION ::= IMPRIMIR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INSTRUCCION ::= DECLARACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INSTRUCCION ::= DECLARACION_LISTA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INSTRUCCION ::= DECLARACION_VECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INSTRUCCION ::= APPEND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INSTRUCCION ::= ASIGNACION_LISTAVECTORES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INSTRUCCION ::= ASIGNACION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INSTRUCCION ::= IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INSTRUCCION ::= FOR 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INSTRUCCION ::= WHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // INSTRUCCION ::= DOWHILE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // INSTRUCCION ::= BREAK 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // INSTRUCCION ::= CONTINUE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // INSTRUCCION ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // INSTRUCCION ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // INSTRUCCION ::= METODO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // INSTRUCCION ::= START_WITH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // INSTRUCCION ::= LLAMADA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // INSTRUCCION ::= error 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // INSTRUCCION ::= error T_SEMICOLON 
            {
              Instruccion RESULT =null;

              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INSTRUCCION",4, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // IMPRIMIR ::= T_PRINTLN P_LEFT EXPRESION P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Print(a,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IMPRIMIR",6, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // DECLARACION ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Boolean mut = (Boolean) m; RESULT = new Declaracion(b, c, a, mut.booleanValue(), aleft, aright);    
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // DECLARACION ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 Boolean mut = (Boolean) m; RESULT = new Declaracion(b, null, a, mut.booleanValue(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION",11, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // DECLARACION_LISTA ::= T_LIST T_LESSTHAN TIPOSDECLARACION T_GREATERTHAN T_ID T_EQUAL T_NEW T_LIST P_LEFT P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-8)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		 RESULT = new DeclaracionLista(b,a,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_LISTA",26, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // DECLARACION_VECTORES ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_BRACEIZ T_BRACEDER T_EQUAL T_BRACEIZ LISTA_VALORES T_BRACEDER T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-10)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> c = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Boolean mut = (Boolean) m; RESULT = new DeclaracionVectores(a,b,c, mut.booleanValue(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-10)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // DECLARACION_VECTORES ::= MUTABILIDAD T_ID T_COLON TIPOSDECLARACION T_BRACEIZ T_BRACEDER T_BRACEIZ T_BRACEDER T_EQUAL T_BRACEIZ LISTA_VALORES_2D T_BRACEDER T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int mleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).left;
		int mright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)).right;
		Object m = (Object)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-12)).value;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-11)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-11)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<List<Instruccion>> c = (List<List<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 Boolean mut = (Boolean) m; RESULT = new DeclaracionVectores2(a, b, c, mut.booleanValue(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACION_VECTORES",29, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-12)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // ASIGNACION_LISTAVECTORES ::= T_ID T_BRACEIZ EXPRESION T_BRACEDER T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AsignacionCombinada(a, b, c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LISTAVECTORES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ASIGNACION_LISTAVECTORES ::= T_ID T_BRACEIZ EXPRESION T_BRACEDER T_BRACEIZ EXPRESION T_BRACEDER T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-9)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion d = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AsignacionCombinada(a, b, c, d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION_LISTAVECTORES",30, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // LISTA_VALORES ::= LISTA_VALORES T_COMMA EXPRESION 
            {
              List<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		List<Instruccion> a = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Instruccion> lista = (List<Instruccion>) a; lista.add((Instruccion) b); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // LISTA_VALORES ::= EXPRESION 
            {
              List<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 List<Instruccion> lista = new LinkedList<>(); lista.add((Instruccion) a); RESULT = lista;  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES",2, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // LISTA_VALORES_2D ::= LISTA_VALORES_2D T_COMMA T_BRACEIZ LISTA_VALORES T_BRACEDER 
            {
              List<List<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		List<List<Instruccion>> a = (List<List<Instruccion>>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> b = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 List<List<Instruccion>> lista = (List<List<Instruccion>>) a; lista.add((List<Instruccion>) b); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_2D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // LISTA_VALORES_2D ::= T_BRACEIZ LISTA_VALORES T_BRACEDER 
            {
              List<List<Instruccion>> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		List<Instruccion> a = (List<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 List<List<Instruccion>> lista = new LinkedList<>(); lista.add((List<Instruccion>) a); RESULT = lista; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LISTA_VALORES_2D",3, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // APPEND ::= T_ID T_DOT T_APPEND P_LEFT EXPRESION P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Append(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("APPEND",27, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // ASIGNACION ::= T_ID T_EQUAL EXPRESION T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AsignacionVar(a, b, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ASIGNACION",12, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // MUTABILIDAD ::= T_VAR 
            {
              Object RESULT =null;
		 RESULT = new Boolean(true); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // MUTABILIDAD ::= T_CONST 
            {
              Object RESULT =null;
		 RESULT = new Boolean(false); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("MUTABILIDAD",33, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // TIPOSDECLARACION ::= T_INT 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.ENTERO);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // TIPOSDECLARACION ::= T_DOUBLE 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.DECIMAL);  
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // TIPOSDECLARACION ::= T_STRING 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CADENA);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // TIPOSDECLARACION ::= T_BOOL 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.BOOLEANO); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // TIPOSDECLARACION ::= T_CHARACTER 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.CARACTER); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // TIPOSDECLARACION ::= T_VOID 
            {
              Tipo RESULT =null;
		 RESULT = new Tipo(tipoDato.VOID); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOSDECLARACION",34, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // INCREMENTO ::= T_ID T_INCREMENT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // INCREMENTO ::= T_ID T_INCREMENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Incremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("INCREMENTO",14, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // DECREMENTO ::= T_ID T_DECREMENT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // DECREMENTO ::= T_ID T_DECREMENT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Decremento(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECREMENTO",15, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // IF ::= T_IF P_LEFT EXPRESION P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER ELSE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new If(a,b,c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("IF",16, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ELSE ::= T_ELSE IF 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // ELSE ::= T_ELSE T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Else(a,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // ELSE ::= 
            {
              Instruccion RESULT =null;
		 RESULT = null; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ELSE",17, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // FOR ::= T_FOR P_LEFT ASIGNACION EXPRESION T_SEMICOLON DECLARACIONFOR P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int dleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int dright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> d = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new For(a,b,c,d, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("FOR",18, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-9)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // DECLARACIONFOR ::= T_ID T_EQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AsignacionVar(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // DECLARACIONFOR ::= INCREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // DECLARACIONFOR ::= DECREMENTO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DECLARACIONFOR",20, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // WHILE ::= T_WHILE P_LEFT EXPRESION P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new While(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("WHILE",22, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // DOWHILE ::= T_DO T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER T_WHILE P_LEFT EXPRESION P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new DoWhile(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("DOWHILE",23, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-8)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // BREAK ::= T_BREAK T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Break(aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("BREAK",19, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // CONTINUE ::= T_CONTINUE T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Continue(aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CONTINUE",21, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // EXPRESION ::= T_MINUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a, Operadores.NEGACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // EXPRESION ::= T_ID 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new AccesoVar(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // EXPRESION ::= P_LEFT EXPRESION P_RIGHT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // EXPRESION ::= TIPOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // EXPRESION ::= ARITMETICAS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // EXPRESION ::= RELACIONALES 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // EXPRESION ::= LOGICOS 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // EXPRESION ::= CASTEO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // EXPRESION ::= ROUND 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // EXPRESION ::= ACCESO_COMBINADO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // EXPRESION ::= REMOVE 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // EXPRESION ::= LENGTH 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("EXPRESION",5, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // ACCESO_COMBINADO ::= T_ID T_BRACEIZ EXPRESION T_BRACEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoCombinado(a,b, aleft, aright);   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO_COMBINADO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // ACCESO_COMBINADO ::= T_ID T_BRACEIZ EXPRESION T_BRACEDER T_BRACEIZ EXPRESION T_BRACEDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion c = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new AccesoCombinado(a,b,c, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ACCESO_COMBINADO",28, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // REMOVE ::= T_ID T_DOT T_REMOVE P_LEFT EXPRESION P_RIGHT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Remove(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("REMOVE",32, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // ARITMETICAS ::= EXPRESION T_PLUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.SUMA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // ARITMETICAS ::= EXPRESION T_MINUS EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.RESTA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // ARITMETICAS ::= EXPRESION T_TIMES EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.MULTIPLICACION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // ARITMETICAS ::= EXPRESION T_DIVIDE EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.DIVISION, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // ARITMETICAS ::= EXPRESION T_POW EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.POTENCIA, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // ARITMETICAS ::= EXPRESION T_MOD EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Aritmeticas(a,b, Operadores.MODULO, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",8, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // RELACIONALES ::= EXPRESION T_TWOEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.IGUALIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // RELACIONALES ::= EXPRESION T_NOTEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.DIFERENTEIGUAL, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // RELACIONALES ::= EXPRESION T_LESSTHAN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MENOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // RELACIONALES ::= EXPRESION T_LESSTHANEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MENORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // RELACIONALES ::= EXPRESION T_GREATERTHAN EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // RELACIONALES ::= EXPRESION T_GREATERTHANEQUAL EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Relacionales(a,b, OperadoresRelacionales.MAYORQUE, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("RELACIONALES",9, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // LOGICOS ::= EXPRESION T_OR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.OR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // LOGICOS ::= EXPRESION T_AND EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.AND, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // LOGICOS ::= EXPRESION T_XOR EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,b, OperadoresLogicos.XOR, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // LOGICOS ::= T_NOT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Logicos(a,   OperadoresLogicos.NOT, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LOGICOS",10, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // TIPOS ::= T_ENTERO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // TIPOS ::= T_CADENA 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // TIPOS ::= T_DECIMAL 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // TIPOS ::= T_CARACTER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(a, new Tipo(tipoDato.CARACTER), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // TIPOS ::= T_BOLEANO 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Nativo(Boolean.parseBoolean(a), new Tipo(tipoDato.BOOLEANO), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("TIPOS",7, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // CASTEO ::= P_LEFT TIPOSDECLARACION P_RIGHT EXPRESION 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion b = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new Casteo(b, a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("CASTEO",13, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // ROUND ::= T_ROUND P_LEFT EXPRESION P_RIGHT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Round(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("ROUND",24, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // METODO ::= TIPOSDECLARACION T_ID P_LEFT PARAMS P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-7)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int pleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int pright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		LinkedList<HashMap> p = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT =  new Metodo(b,p,c,a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-7)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // METODO ::= TIPOSDECLARACION T_ID P_LEFT P_RIGHT T_BRACKETIZ LISTAINSTRUCCIONES T_BRACKETDER 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-6)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-5)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		LinkedList<Instruccion> c = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		   RESULT =  new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("METODO",25, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-6)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // PARAMS ::= PARAMS T_COMMA TIPOSDECLARACION T_ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		LinkedList<HashMap> a = (LinkedList<HashMap>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo b = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int cleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int cright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String c = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; var hm2 = new HashMap<String, Object>(); hm2.put("id",c); hm2.put("tipo",b); RESULT.add(hm2); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // PARAMS ::= TIPOSDECLARACION T_ID 
            {
              LinkedList<HashMap> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Tipo a = (Tipo)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		String b = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<HashMap>(); var hm = new HashMap<String, Object>();hm.put("id",b);hm.put("tipo", a);RESULT.add(hm);
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMS",35, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // PARAMSCALL ::= PARAMSCALL T_COMMA EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> a = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion e = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = a; RESULT.add(e); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // PARAMSCALL ::= EXPRESION 
            {
              LinkedList<Instruccion> RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.peek()).value;
		 RESULT = new LinkedList<Instruccion>(); RESULT.add(a); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("PARAMSCALL",36, ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // START_WITH ::= T_START_WITH T_ID P_LEFT PARAMSCALL P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Execute(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START_WITH",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-5)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // START_WITH ::= T_START_WITH T_ID P_LEFT P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright ); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("START_WITH",37, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // LLAMADA ::= T_ID P_LEFT PARAMSCALL P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-4)).value;
		int bleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-2)).right;
		LinkedList<Instruccion> b = (LinkedList<Instruccion>)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-2)).value;
		 RESULT = new Llamada(a,b,aleft,aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-4)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // LLAMADA ::= T_ID P_LEFT P_RIGHT T_SEMICOLON 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)).right;
		String a = (String)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-3)).value;
		 RESULT = new Llamada(a, new LinkedList<Instruccion>(), aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LLAMADA",38, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // LENGTH ::= T_LENGTH P_LEFT EXPRESION P_RIGHT 
            {
              Instruccion RESULT =null;
		int aleft = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-1)).right;
		Instruccion a = (Instruccion)((java_cup.runtime.Symbol) CUP$Parser$stack.elementAt(CUP$Parser$top-1)).value;
		 RESULT = new Length(a, aleft, aright); 
              CUP$Parser$result = parser.getSymbolFactory().newSymbol("LENGTH",39, ((java_cup.runtime.Symbol)CUP$Parser$stack.elementAt(CUP$Parser$top-3)), ((java_cup.runtime.Symbol)CUP$Parser$stack.peek()), RESULT);
            }
          return CUP$Parser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number "+CUP$Parser$act_num+"found in internal parse table");

        }
    } /* end of method */

  /** Method splitting the generated action code into several parts. */
  public final java_cup.runtime.Symbol CUP$Parser$do_action(
    int                        CUP$Parser$act_num,
    java_cup.runtime.lr_parser CUP$Parser$parser,
    java.util.Stack            CUP$Parser$stack,
    int                        CUP$Parser$top)
    throws java.lang.Exception
    {
              return CUP$Parser$do_action_part00000000(
                               CUP$Parser$act_num,
                               CUP$Parser$parser,
                               CUP$Parser$stack,
                               CUP$Parser$top);
    }
}

}
