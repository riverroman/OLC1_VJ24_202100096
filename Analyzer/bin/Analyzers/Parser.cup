package Analyzers;

import java_cup.runtime.*;

parser code 
{:

    public void syntax_error(Symbol s){ 
        System.out.println("Error Sintáctico en la Línea | " + (s.left) + " Columna | " + s.right+ " No se esperaba este componente | " + s.value); 
    } 

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{ 
        System.out.println("Error síntactico irrecuperable en la Línea | " + (s.left)+ " Columna | "+ s.right+" Componente | " + s.value + " | No reconocido"); 
    }  
:}

action code
{:  :}

/*      Terminales      */

terminal String T_ENTERO,T_CADENA,T_DECIMAL,T_CARACTER;
terminal String T_PRINTLN;
terminal String P_LEFT, P_RIGHT, T_SEMICOLON, T_BOLEANO;
terminal String T_PLUS, T_MINUS, T_TIMES, T_DIVIDE, T_POW, T_MOD;

/*      No Terminales       */

non terminal INICIO;
non terminal LISTAINSTRUCCIONES, INSTRUCCION;
non terminal IMPRIMIR, EXPRESION, TIPOS, ARITMETICAS;

/*      Manejo de Precedencia   */

precedence left T_PLUS, T_MINUS;

start with INICIO; 

INICIO ::= LISTAINSTRUCCIONES 
    |       
;

LISTAINSTRUCCIONES ::= LISTAINSTRUCCIONES INSTRUCCION
    |                  INSTRUCCION
;

INSTRUCCION ::= IMPRIMIR
;

IMPRIMIR ::= T_PRINTLN P_LEFT EXPRESION:exp P_RIGHT T_SEMICOLON       {:  Util.Imprimir.Print(exp.toString()); :}
;

EXPRESION ::= TIPOS:val         {: RESULT = val.toString(); :}
    |         ARITMETICAS:val   {: RESULT = val.toString(); :}
;

ARITMETICAS ::=  EXPRESION:a T_PLUS EXPRESION:b      {: RESULT = Instrucciones.Aritmeticas.Suma(a.toString(), b.toString()); :}
        |        EXPRESION:a T_MINUS EXPRESION:b     {: RESULT = Instrucciones.Aritmeticas.Resta(a.toString(), b.toString()); :}
;

TIPOS ::=  T_ENTERO:val     {: RESULT = val.toString(); :} 
    |      T_CADENA:val     {: RESULT = val.toString(); :}
    |      T_DECIMAL:val    {: RESULT = val.toString(); :}
    |      T_BOLEANO:val    {: RESULT = val.toString(); :}
    |      T_CARACTER:val   {: RESULT = val.toString(); :}    
;