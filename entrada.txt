START_WITH main();

var var1: int = 0;


const arreglo2: int[] = [0, 0, 1, 2, 0, 0, 5, 1, 0, 0, 8, 0, 0];

void main(){
    println("Archivo de prueba");
    println("Si sale compi1");

    var var1: int = 10;

    if (var1 == 0) {
        println("Manejo de ambitos erroneo :'(");
    } else {
        println("Manejo de ambitos correcto");
    }

    // tabla de multiplicar
    tablaMultiplicar(5);

    // recursividad
    recursividadBasica();

    // arreglos
    AnalizarArreglo();

    println("Fin de la prueba");
}


void tablaMultiplicar(int valor){
    const cadenaSalida: string = "Final de la tabla de multiplicar";
    var i: int = 0;
    for (i = 1; i <= 11; i++) {
        println(valor + " x " + i + " = " + valor * i);
        if (i == 10) {
            println(cadenaSalida);
            break;
        }
    }
}

// probando una funcion recursiva
double mcd(double a, double b){
    if (b == 0.0) {
        return a;
    } else {
        return mcd(b, a % b);
    }
}

void recursividadBasica(){
    const resultado: double = mcd(48.0, 18.0);

    if (resultado == 6) {
        println("Funcion recursiva correcta");
        return;
    }
    println("Funcion recursiva incorrecta");
}

// viendo arreglos
void AnalizarArreglo(){
    var temporal: int = 0;
    var suma: int = 0;
    var ceros: int = 0;
    var i: int = 0;
    for (i = 0; i < length(arreglo2); i++) {
        temporal = arreglo2[i];
        if (temporal == 0) {
            ceros = ceros + 1;
            continue;
        }
        suma = suma + temporal;
    }
    println("La suma de los elementos del arreglo es: " + suma);
    println("La cantidad de ceros en el arreglo es: " + ceros);
}

// Salida de archivo de prueba
/*
Archivo de prueba
Si sale compi1
Manejo de ambitos correcto
5 x 1 = 5
5 x 2 = 10
5 x 3 = 15
5 x 4 = 20
5 x 5 = 25
5 x 6 = 30
5 x 7 = 35
5 x 8 = 40
5 x 9 = 45
5 x 10 = 50
Final de la tabla de multiplicar
Funcion recursiva correcta
La suma de los elementos del arreglo es: 17
La cantidad de ceros en el arreglo es: 8
Fin de la prueba
*/